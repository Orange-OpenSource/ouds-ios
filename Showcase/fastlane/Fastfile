#
# Software Name: Orange Unified Design System
# SPDX-FileCopyrightText: Copyright (c) Orange SA
# SPDX-License-Identifier: MIT
#
# This software is distributed under the MIT license,
# the text of which is available at https://opensource.org/license/MIT/
# or see the "LICENSE" file for more details.
#
# Authors: See CONTRIBUTORS.txt
# Software description: A SwiftUI components library with code examples for Orange Unified Design System
#

require 'net/http'
require 'json'

# App features configuration
# --------------------------

# TODO Add URL for MoreApps module to get feed from APPS_PLUS backend (cf github.com/Orange-OpenSource/ods-ios)

# Apple configuration
# -------------------

# TestFlight
# Configuration for App Store Connect API (https://appstoreconnect.apple.com/access/integrations/api)
#   OUDS_APPLE_ISSUER_ID = Issuer identifier (unique to group)
#   OUDS_APPLE_KEY_ID = key identifier (for the app)
#   OUDS_APPLE_KEY_CONTENT = private key associated to the key identifier
APPLE_ISSUER_ID = ENV["OUDS_APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["OUDS_APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["OUDS_APPLE_KEY_CONTENT"]

# Bundle identifier of the app
DEVELOPER_APP_IDENTIFIER = ENV["OUDS_DEVELOPER_BUNDLE_IDENTIFIER"]

# Notifications and hooks
# -----------------------

MATTERMOST_HOOK_URL = ENV["OUDS_MATTERMOST_HOOK_URL"]
MATTERMOST_HOOK_BOT_NAME = ENV["OUDS_MATTERMOST_HOOK_BOT_NAME"]
MATTERMOST_HOOK_BOT_ICON_URL = ENV["OUDS_MATTERMOST_HOOK_BOT_ICON_URL"]

# GitHub
# ------

# Fine grained personal access token with enough permissions for the suitable GitHub project
GITHUB_ACCESS_TOKEN = ENV['GITHUB_ACCESS_TOKEN']

# Should be last commit full hash, for builds and tags
IOS_APP_COMMIT_SHA = ENV['IOS_APP_COMMIT_SHA']

# Project configuration
# ---------------------

OUDS_WORKSPACE = "Showcase.xcworkspace"
OUDS_PROJECT = "Showcase.xcodeproj"
OUDS_SCHEME = "Showcase"

# Lanes
# ------

default_platform(:ios)

platform :ios do

    before_all do |lane, options|
        xcversion(version: "~> 16.0")
    end

    # ------------------------------------------------------------
    # UPDATE BUILD NUMBER WITH TIMESTAMP
    # ------------------------------------------------------------
    desc "UPDATE BUILD NUMBER WITH TIMESTAMP"
    lane :update_build_number do
        puts "üëâ Update build number"

        timestamp = sh 'date +%s' # Timestamp are unique and bring details about build date
        timestamp = timestamp.strip!
        puts "‚ÑπÔ∏è New builder number: '#{timestamp}'"

        increment_build_number(xcodeproj: OUDS_PROJECT, build_number: timestamp)
    end

    # TODO Add lane for add_credentials_appsplus (cf github.com/Orange-OpenSource/ods-ios)

    # ---------
    # RUN TESTS
    # ---------
    desc "RUN TESTS BY TRIGGERING THE TESTS PLANS OF THE PROJECT"
    lane :test do
        puts "üëâ Run tests"

        # Should have on runner one device under at least iOS 15
        # Check the available devices using `xcrun xctrace list devices`
        # Add new environments using `xcodebuild -downloadPlatform iOS`
        begin
            device = "iPhone 14"
            scan(scheme: "Showcase",
                device: device,
                skip_build: true)

            if MATTERMOST_HOOK_URL.nil? || MATTERMOST_HOOK_URL.empty?
                publish_mattermost_notification("üß™ ‚úÖ No issue with tests")
            else
                puts "‚ÑπÔ∏è No MATTERMOST_HOOK_URL defined, it could mean this lane is called on GitHub Action workflow"
            end
        rescue => error
            if MATTERMOST_HOOK_URL.nil? || MATTERMOST_HOOK_URL.empty?
                publish_mattermost_notification("üß™ üö® @channel Some issue occured with tests (:test)")
            else
                puts "‚ÑπÔ∏è No MATTERMOST_HOOK_URL defined, it could mean this lane is called on GitHub Action workflow"
            end
            raise error
        end
    end
    
    # ------------
    # RUN UI TESTS
    # ------------
    desc "RUN UI TESTS BY TRIGGERING THE TESTS PLANS OF THE PROJECT"
    lane :test_ui do
        puts "üëâ Run UI tests"

        # Should have on runner one device under at least iOS 15
        # Check the available devices using `xcrun xctrace list devices`
        # Add new environments using `xcodebuild -downloadPlatform iOS`
        begin
            device = "iPhone 15 Pro"
            scan(scheme: "ShowcaseTests",
                device: device,
                skip_build: true
            )

            if MATTERMOST_HOOK_URL.nil? || MATTERMOST_HOOK_URL.empty?
                publish_mattermost_notification("üß™ ‚úÖ No issue with UI tests")
            else
                puts "‚ÑπÔ∏è No MATTERMOST_HOOK_URL defined, it could mean this lane is called on GitHub Action workflow"
            end
        rescue => error
            if MATTERMOST_HOOK_URL.nil? || MATTERMOST_HOOK_URL.empty?
                publish_mattermost_notification("üß™ üö® @channel Some issue occured with tests (:test_ui)")
            else
                puts "‚ÑπÔ∏è No MATTERMOST_HOOK_URL defined, it could mean this lane is called on GitHub Action workflow"
            end
            raise error
        end
    end

    # ------------------------------------------------------------
    # READ AND SET NEXT RELEASE NOTE IN CHANGELOG
    # ------------------------------------------------------------
    # TODO Maybe this lane should be removed or updated if we have several changelogs or if we use git-cliff
    desc "READ AND SET NEXT RELEASE NOTE IN CHANGELOG"
    lane :prepare_release do
        puts "üëâ Prepare release"

        version = get_app_version

        stamp_changelog(
            changelog_path: '../CHANGELOG.md',
            section_identifier: version,
            git_tag: version,
            should_stamp_date: true,
            stamp_datetime_format: '%F'
        )
    end

    # ------------------------------------------------------------
    # BUILD DEBUG APP
    # ------------------------------------------------------------
    desc "BUILD DEBUG APP"
    lane :buildDebugApp do
        puts "üëâ Build debug app"

        cocoapods(
          clean_install: true
        )

        gym(
            scheme: OUDS_SCHEME,
            output_directory: 'build/',
            archive_path: 'build/',
            output_name: 'oudsApp',
            configuration: 'Debug',
            include_symbols: true,
            export_method: 'development'
        )
    end

    # ------------------------------------------------------------
    # BUILD & UPLOAD TO TESTFLIGHT ALPHA APP
    # ------------------------------------------------------------
    desc "BUILD & UPLOAD TO TESTFLIGHT ALPHA APP"
    lane :alpha do |params|
        issues_numbers = params[:issueNumber]
        puts "üëâ Alpha (commit hash = '#{params[:commitHash]}, issue number = '#{issues_numbers}')"

        if issues_numbers.nil? || issues_numbers.empty?
            puts "‚ùå Error: No issues numbers have been given for alpha builds, nothing will be done"
            publish_mattermost_notification("‚öôÔ∏è üò∞ Tried to build alpha version without mentioning issues numbers!")
            raise "Bad prerequisites error - missing pipeline variable"
        end

        Dir.chdir "../Showcase/Resources/Assets.xcassets" do
            sh "rm -Rf AppIconRelease.appiconset"
            sh "cp -R AppIconDev.appiconset AppIconRelease.appiconset"
        end

        # CFBundleVersion and CFBundleShortVersionString must follow rules with integers and periods, should not change them
        # But still possible to change CFBundleDisplayName
        new_display_name = "OUDS Showcase ALPHA (#{issues_numbers})"
        puts "‚ÑπÔ∏è New display name version will be: '#{new_display_name}'"
        set_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "CFBundleDisplayName", value: new_display_name)

        # Details for the GUI in the app
        set_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "OUDSBuildType", value: "ALPHA")
        set_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "OUDSBuildTag", value: "#{params[:commitHash][0,7]}".strip)
        set_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "OUDSBuildDetails", value: "#{issues_numbers}")

        build_and_upload(isAlpha: true, upload: true)
    end

    # ------------------------------------------------------------
    # BUILD & UPLOAD TO TESTFLIGHT BETA APP
    # ------------------------------------------------------------
    desc "BUILD & UPLOAD TO TESTFLIGHT BETA APP"
    lane :beta do |params|
        puts "üëâ Beta (commit hash = '#{params[:commitHash]}')"
        Dir.chdir "../Showcase/Resources/Assets.xcassets" do
            sh "rm -Rf AppIconRelease.appiconset"
            sh "cp -R AppIconQualif.appiconset AppIconRelease.appiconset"
        end

        new_display_name = "OUDS Showcase (BETA)"
        puts "‚ÑπÔ∏è New display name version will be: '#{new_display_name}'"
        set_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "CFBundleDisplayName", value: new_display_name)

        # Details for the GUI in the app
        set_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "OUDSBuildType", value: "BETA")
        set_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "OUDSBuildTag", value: "#{params[:commitHash][0,7]}".strip)
        
        build_and_upload(isAlpha: false, upload: true, detailSymbol: params[:commitHash])
    end

    # ------------------------------------------------------------
    # BUILD & UPLOAD TO TESTFLIGHT PROD APP
    # ------------------------------------------------------------
    desc "BUILD & UPLOAD TO TESTFLIGHT (if set in options: upload) PROD APP"
    lane :prod do |params|
        puts "üëâ Prod"
        update_build_number

        new_display_name = "OUDS Showcase"
        puts "‚ÑπÔ∏è New display name version will be: '#{new_display_name}'"
        set_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "CFBundleDisplayName", value: new_display_name)

        # Details for the GUI in the app
        set_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "OUDSBuildType", value: "PROD")
        
        build
        if params[:upload]
            puts "Upload to TestFlight requested"
            upload(type: "prod")
        else
            puts "Upload to TestFlight not requested"
        end
    end

    # -----------------------------------------------------------------------
    # PRIVATE LANE BUILD & UPLOAD (ALPHA / BETA / PROD is set by main lane)
    # -----------------------------------------------------------------------
    private_lane :build_and_upload do |params|
        isAlpha = params[:isAlpha]

        if isAlpha # Alpha case, detailSymbol should be the issue number of the feature/fix to test
            puts "üëâ Build and upload (alpha)"
            update_build_number
            build
            upload(type: "alpha")
            public_github_notifications_build_details

        else # Beta case (not production too), detailSymbol should be here commit hash
            detailSymbol = params[:detailSymbol]
            puts "üëâ Build and upload (alpha = #{isAlpha}), detail symbol = #{detailSymbol})"
            
            # If already built, prevents to build again for nothing
            # Warning: tag is done before build and not removed, so if build failed, tag will remain and needs to be removed manualy.
            # It prevents to have loops of failing builds.
            if tag_ci_build(detailSymbol)
                # Ensure this build-then-uploaded app has a new and unique build number matching also to code version
                update_build_number
                build
            else
                puts "‚ÑπÔ∏è Nothing new to build today, a CI tag for commit '#{detailSymbol}' already exists"
                publish_mattermost_notification("‚öôÔ∏è ü§î Nothing new to build today, a CI tag for commit '#{detailSymbol}' already exists")
            end
            
            if params[:upload]
                puts "‚ÑπÔ∏è Upload to TestFlight requested"
                # If already uploaded, prevents to upload again
                if tag_testflight_upload(detailSymbol)
                    upload(type: "beta")
                else
                    puts "‚ÑπÔ∏è Nothing new to build today, a TestFlight tag for commit '#{detailSymbol}' already exists"
                    publish_mattermost_notification("‚öôÔ∏è ü§î Nothing new to build today, a TestFlight tag for commit '#{detailSymbol}' already exists")
                end
            else
                puts "‚ÑπÔ∏è Upload to TestFlight not requested"
            end

        end
    end

    # -----------------------------------------------------------------------
    # PRIVATE LANE BUILD (ALPHA / BETA / PROD is set by main lane)
    # -----------------------------------------------------------------------
    desc "PRIVATE LANE BUILD (ALPHA / BETA / PROD is set by main lane)"
    private_lane :build do
        puts "üëâ Build"

        begin
            update_app_identifier(
                xcodeproj: "#{OUDS_PROJECT}",
                plist_path: "Showcase/Info.plist",
                app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
            )

            cocoapods(
                clean_install: true
            )

            # Disable automatic code signing for release / distribution builds.
            # Thus we won't use any Xcode with plugged account in, and use only needed certificates and provisioning profiles.
            # Mobile provisioning profile named "OUDS demo app (release)" must be placed in runner.
            # The certificate(s) used to build (with bundle ID) the provisionning profile must be available in the keychain of the runner
            # (both .cer and .p12), here a distribution certificate.
            # This way is more agile and allows to use VM-based solution with on the fly configuration like with Tart.
            update_code_signing_settings(path: "#{OUDS_PROJECT}",
                use_automatic_signing: false,
                profile_name: 'OUDS demo app (release)',
                targets: OUDS_SCHEME)
            
            gym(workspace: "#{OUDS_WORKSPACE}",
                scheme: OUDS_SCHEME,
                configuration: "Release",
                output_directory: "build/",
                export_method: "app-store",
                archive_path: "build/oudsApp.xcarchive",
                xcargs: "-allowProvisioningUpdates")
            
            # Build a ZIP archive to put as artifact to the GitLab CI runner
            # Needed for upload later as .xcarchive for App Store through corporate portal
            zip(path: "build/oudsApp.xcarchive",
                output_path: "build/oudsApp.zip")
                          
            version = get_app_version
            build_number = get_build_number(xcodeproj: OUDS_PROJECT)

            publish_mattermost_notification("üî® ‚úÖ A new build has been done successfully (version = '#{version}', build number = '#{build_number}')")
        rescue => error
            publish_mattermost_notification("üî® üö® @channel Some issue occurred during the build step (:build)")
            raise error
        end
    end

    # --------------------------------------------------------------------------
    # PRIVATE LANE UPLOAD TO TESTFLIGHT (ALPHA / BETA / PROD is set by main lane)
    # ---------------------------------------------------------------------------
    desc "PRIVATE LANE UPLOAD TO TESTFLIGHT"
    private_lane :upload do |params|
        puts "üëâ Upload"

        begin
            api_key = app_store_connect_api_key(
                key_id: APPLE_KEY_ID,
                issuer_id: APPLE_ISSUER_ID,
                key_content: APPLE_KEY_CONTENT,
                duration: 500,
                in_house: false
            )
            
            TESTFLIGHT_GROUPS = ENV['TESTFLIGHT_GROUPS'] # Defined in Appfile
            
            version = get_app_version
            puts "‚ÑπÔ∏è App version: '#{version}'"

            build_number = get_build_number(xcodeproj: OUDS_PROJECT)
            puts "‚ÑπÔ∏è App build number: '#{build_number}'"

            uploadType = params[:type]
            if uploadType != nil && uploadType.to_s.empty? == false
                puts "‚ÑπÔ∏è Upload type: '#{uploadType}'"
                news = "Warning: this is #{uploadType} build\n\n" + read_current_release_notes # Add details about build type in changelog for TestFlight
            else
                puts "‚ÑπÔ∏è Upload type seems to be production"
                news = read_current_release_notes
            end

            upload_to_testflight(
                changelog: news,
                app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
                skip_submission: false,
                skip_waiting_for_build_processing: false,
                distribute_external: true,
                notify_external_testers: true,
                groups: TESTFLIGHT_GROUPS,
                api_key: api_key
            )
            
            publish_mattermost_notification("üì¶ ‚úÖ @here The upload to TestFlight has been done successfully (version = '#{version}', build number = '#{build_number}')")    
        rescue => error
            publish_mattermost_notification("üì¶ üö® @channel Some issue occurred during the upload step (:upload)")
            raise error
        end
    end
    
    # -------
    # Helpers
    # -------

    # Add a Git tag dedicated to CI/CD builds with for some commit hash used to compute tag suffix
    def tag_ci_build(commitHash)
        puts "üëâ Tag CI build"

        begin
            if commitHash.nil? || commitHash.empty?
                puts "‚ÑπÔ∏è No parameter sent for CI tag, nothing will be done"
                publish_mattermost_notification("‚öôÔ∏è ü§î No commit hash has been given, no tag can be created")
                return false
            else
                expected_git_tag = "ci/" + commitHash[0,7]
                if create_tag(expected_git_tag)
                    publish_mattermost_notification("üì¶ ‚úÖ  New Git tag created: #{expected_git_tag}")
                    return true
                else
                    return false
                end
            end
        rescue => error
            publish_mattermost_notification("üì¶ üö® @channel Some issue occurred during the tagging step (:tag_ci_build)")
            raise error
        end
    end

    # Add a Git tag dedicated to TestFLight uploads for some commit hash used to compute tag suffix
    def tag_testflight_upload(commitHash)
        puts "üëâ Tag TestFlight upload"

        begin     
            if commitHash.nil? || commitHash.empty?
                puts "‚ÑπÔ∏è No parameter sent for CI tag, nothing will be done"
                publish_mattermost_notification("‚öôÔ∏è ü§î No commit hash has been given, no tag can be created")
                return false
            else
                expected_git_tag = "Test_Flight/" + commitHash[0,7]
                if create_tag(expected_git_tag)
                    publish_mattermost_notification("üì¶ ‚úÖ New Git tag created: #{expected_git_tag}")
                    return true
                else
                    return false
                end
            end
        rescue => error
            publish_mattermost_notification("üì¶ üö® @channel Some issue occurred during the tagging step (:tag_testflight_upload)")
            raise error
        end
    end

    # Creates a Git tag at given commit through HTTP protocol to prevent proxy or firewalls to block SSH requests.
    # Not possible also to make repository mirroring because of the current purchased plan of the GitLab instance.
    def create_tag(tag)
      
        # Check personal access token for tag creation
        if GITHUB_ACCESS_TOKEN.nil? || GITHUB_ACCESS_TOKEN.empty?
            puts "‚ùå Error: No GitHub access token defined, cannot create and push tags"
            publish_mattermost_notification("‚öôÔ∏è üò∞ @channel No GitHub access token defined, cannot create and push tags!")
            return false
        else
            # Check if given tag exists yet
            puts "‚ÑπÔ∏è Check if '#{tag}' exists yet"

            uri = URI("https://api.github.com/repos/Orange-OpenSource/ouds-ios/tags")
            response = Net::HTTP.get(uri)
            tags = JSON.parse(response)

            if tags.any? { |t| t['name'] == tag }
                puts "‚ÑπÔ∏è The tag '#{tag}' still exists, won't create new tag"
                return false
            else
                puts "‚ÑπÔ∏è Commit SHA to tag is '#{IOS_APP_COMMIT_SHA}'"

                uri = URI("https://api.github.com/repos/Orange-OpenSource/ouds-ios/git/refs")
                http = Net::HTTP.new(uri.host, uri.port)
                http.use_ssl = true
                
                request = Net::HTTP::Post.new(uri.path)
                request['Accept'] = 'application/vnd.github+json'
                request['Authorization'] = "Bearer #{GITHUB_ACCESS_TOKEN}"
                request['X-GitHub-Api-Version'] = '2022-11-28'
                request.body = { ref: "refs/tags/#{tag}", sha: IOS_APP_COMMIT_SHA }.to_json
                
                response = http.request(request)
                
                if response.code.to_i == 201
                  puts "‚ÑπÔ∏è Light tag '#{tag}' published in repository"
                  return true
                else
                  puts "‚ùå Error: Failed to publish light tag '#{tag}'"
                  return false
                end
            end
        end
    end

    # Sends a message notification through Mattermost hook
    def publish_mattermost_notification(message)
        mattermost(url: MATTERMOST_HOOK_URL,
                  text: "#{message}",
                  username: MATTERMOST_HOOK_BOT_NAME,
                  icon_url: MATTERMOST_HOOK_BOT_ICON_URL
                  )
    end

    # Send a comment to the GitHub related GitHub issues about a new available build.
    # Will find in Info.plist of demo app all the suitable needed details.
    def public_github_notifications_build_details
        build_version = get_app_version
        build_number = get_build_number(xcodeproj: OUDS_PROJECT)
        build_display_name = get_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "CFBundleDisplayName")
        build_type = get_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "OUDSBuildType")
        build_tag = get_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "OUDSBuildTag")
        build_details = get_info_plist_value(path: "#{Dir.pwd}/../Showcase/Info.plist", key: "OUDSBuildDetails")
        
        build_issues_numbers = build_details.scan(/\d+/).map(&:to_i)
        
        build_issues_numbers.each do |issue_number|
            uri = URI("https://api.github.com/repos/Orange-OpenSource/ouds-ios/issues/#{issue_number}")
            response = Net::HTTP.get(uri)
            issue = JSON.parse(response)
        
            if issue['message'] == 'Not Found'
                puts "‚ùå Error: Issue '#{issue_number}' does not exist"
            else
          
                comment_to_upload=<<-EOF
üì£ **New TestFlight ALPHA upload available** üöÄ

Please, get the new build from *TestFlight* app, or contact the project maintainers if you don't have access.

- Display name: **#{build_display_name}**
- Version: **#{build_version}**
- Build number: **#{build_number}**
- Build tag: **#{build_tag}**
- Build type: **#{build_type}**
- Build details (GitHub): **#{build_details}**

<!--
@B3nz01d - Beno√Æt SUZANNE - Product Owner
@pylapp - Pierre-Yves LAPERSONNE - iOS developer
@ludovic35 - Ludovic PINEL - iOS developer
@Tayebsed93 - Tayeb SEDRAIA - iOS developer and accessibility expert
@mccart77 - Stephen McCARTHY - designer
-->
cc @B3nz01d @pylapp @ludovic35 @Tayebsed93 @mccart77

_This is an automated message sent with love and *Fastlane* from our CI/CD pipeline ü§ò_
EOF

                uri = URI("https://api.github.com/repos/Orange-OpenSource/ouds-ios/issues/#{issue_number}/comments")
                http = Net::HTTP.new(uri.host, uri.port)
                http.use_ssl = true
          
                request = Net::HTTP::Post.new(uri.path)
                request['Authorization'] = "Bearer #{GITHUB_ACCESS_TOKEN}"
                request['Content-Type'] = 'application/json'
                request.body = { body: comment_to_upload }.to_json
          
                response = http.request(request)
          
                if response.code.to_i == 201
                    puts "‚ÑπÔ∏è Comment posted on issue '#{issue_number}'"
                else
                    puts "‚ùå Error: Failed to post comment on issue '#{issue_number}'"
                end
            end
        end
    end

    # Get version set in the Xcode project
    def get_app_version
        version = get_version_number(
            xcodeproj: OUDS_PROJECT,
            target: OUDS_SCHEME
        )
        return version
    end

    # Read release note in section associated to the current version
    # If empty, try within the Unreleased section
    def read_current_release_notes
        version = get_app_version

        changelog = read_changelog(
            changelog_path: '../CHANGELOG.md',
            section_identifier: "[#{version}]",
        )

        if changelog == ""
            changelog = read_changelog(
                changelog_path: '../CHANGELOG.md',
                section_identifier: "[Unreleased]",
            )
        end

        puts "‚ÑπÔ∏è Current relase notes = #{changelog}"
        return changelog
    end
end
