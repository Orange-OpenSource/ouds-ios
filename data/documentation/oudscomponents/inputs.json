{"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"text":"Checkboxes","anchor":"Checkboxes","type":"heading","level":3},{"text":"Checkbox (only)","anchor":"Checkbox-only","type":"heading","level":4},{"inlineContent":[{"type":"text","text":"The library proposes layout to add in your views some checkboxes components, even if this type of component is not iOS-native one."},{"type":"text","text":" "},{"type":"text","text":"You can use a simple checkbox without any labels and images."},{"type":"text","text":" "},{"type":"text","text":"This checkbox can provide two values (selected and unselected) or three values (selected, unselected and indeterminate)"}],"type":"paragraph"},{"syntax":"swift","code":["    \/\/ A simple checkbox, with only an indicator","    \/\/ The component must be instanciated with a string parameter used as accessibility label that will be","    \/\/ vocalized by Voice Over. ","","    \/\/ The isOn parameter can have only two values: true (selected), false (unselected)","    OUDSCheckbox(isOn: $isOn, accessibilityLabel: \"Select the element\")","","    \/\/ The selection parameter can have only three values: selected, unselected and indeterminate","    OUDSCheckboxIndeterminate(selection: $selection, accessibilityLabel: \"Select the element\")"],"type":"codeListing"},{"level":4,"anchor":"Checkbox-item","type":"heading","text":"Checkbox item"},{"inlineContent":[{"type":"text","text":"The library proposes also a checkbox which has in its layout some labels and icons."},{"type":"text","text":" "},{"type":"text","text":"The indicator can be leading or trailing."},{"type":"text","text":" "},{"type":"text","text":"It can be be sued for two-states or three-states management."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["    \/\/ A leading checkbox with a label, with only two states","    OUDSCheckboxItem(isOn: $isOn, label: \"Hello world\")","","    \/\/ A leading checkbox with a label, an helper text, and exposing a three-values-based state with selection binding","    OUDSCheckboxItemIndeterminate(selection: $selection, ","                                  label: \"Dead Robot Zombie Cop\",","                                  helper: \"from Outer Space II\")","","    \/\/ A trailing checkbox with a label, an helper text, an icon, a divider and is about an error","    \/\/ with a reversed layout, and exposing only two states through isOn binding","    OUDSCheckboxItem(isOn: $isOn,","                     label: \"We live in a fabled world\",","                     helper: \"Of dreaming boys and wide-eyed girls\",","                     icon: Image(decorative: \"ic_heart\"),","                     isReversed: true,","                     isError: true,","                     hasDivider: true)"]},{"level":4,"anchor":"Checkbox-picker","type":"heading","text":"Checkbox picker"},{"inlineContent":[{"text":"Checkboxes can be embeded in a checkbox picker so as to let the users to select one or more items within several.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["     \/\/ Define the elements to display in checkboxes using OUDSCheckboxPickerData.","     \/\/ This object has the same properties as the OUDSCheckboxItem,","     \/\/ and some of them are optional with default values set","     var someDataToPopulate: [OUDSCheckboxPickerData<String>] {","         [","         OUDSCheckboxPickerData<String>(tag: \"Choice_1\",","                                        label: \"Virgin Holy Lava\",","                                        additionalLabel: \"Very spicy\",","                                        helper: \"No alcohol, only tasty flavors\",","                                        icon: Image(systemName: \"flame\")),","","         OUDSCheckboxPickerData<String>(tag: \"Choice_2\",","                                       label: \"IPA beer\",","                                        helper: \"From Brewdog company\",","                                        icon: Image(systemName: \"dog.fill\")),","","         OUDSCheckboxPickerData<String>(tag: \"Choice_3\",","                                        label: \"Mineral water\",","                                        icon: Image(systemName: \"waterbottle.fill\")),","         ]","     }","","     \/\/ Prepare the selection, with a value previously selected","     \/\/ Use the data and the binding for the picker.","     @State var selections: [String] = [\"Choice_1\"] \/\/ or empty if nothing selected","     \/\/ Here the picker is vertical by default","     OUDSCheckboxPicker(selections: $selections, checkboxes: someDataToPopulate)","","     \/\/ The picker can be vertical and have a root item with a label and a counter","     OUDSCheckboxPicker(selections: $selections,","                        placement: .verticalRooted(label, .textAndCount))","","     \/\/ The picker can apply some settings to all its radio buttons.","     \/\/ It can be also horizontal with a scroll indicator.","     \/\/ Here all the the checkboxes are in read only mode and use reversed layout.","     \/\/ Here the picker is horizontal and shows the scroll indicator","     OUDSCheckboxPicker(selections: $selections,","                        checkboxes: someDataToPopulate)","                        isReversed: true,","                        isReadOnly: true,","                        placement: .horizontal(true))"]},{"text":"Radios","level":3,"anchor":"Radios","type":"heading"},{"text":"Radio (only)","level":4,"anchor":"Radio-only","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The library proposes layout to add in your views some radio buttons components, even if this type of component is not iOS-native one.","type":"text"},{"text":" ","type":"text"},{"text":"You can use a simple radio without any labels and images.","type":"text"}]},{"code":["     \/\/ A simple radio, with only an indicator","     \/\/ The component must be instanciated with a string parameter used as accessibility label that will ","     \/\/ be vocalized by Voice Over. ","     OUDSRadio(isOn: $selection, accessibilityLabel: \"Select the element\")"],"type":"codeListing","syntax":"swift"},{"text":"Radio item","level":4,"anchor":"Radio-item","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library proposes also a radio which has in its layout some labels and icons."},{"type":"text","text":" "},{"type":"text","text":"The indicator can be leading or trailing."}]},{"code":["     \/\/ A leading radio with a label","     OUDSRadioItem(isOn: $selection, label: \"Lucy in the Sky with Diamonds\")","","     \/\/ A trailing radio with a label, an additional label, an helper text, an icon, a divider and is about an","     \/\/ error with a reversed layout","     OUDSRadioItem(isOn: $selection,","                   label: \"Lucy in the Sky with Diamonds\",","                   additionalLabel: \"The Beatles\"","                   helper: \"1967\",","                   icon: Image(decorative: \"ic_heart\"),","                   isReversed: true,","                   isError: true,","                   hasDivider: true)"],"type":"codeListing","syntax":"swift"},{"text":"Radio picker","level":4,"anchor":"Radio-picker","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Radio items can be embeded in a radio picker so as to let the users to select only one item within several.","type":"text"}]},{"code":["    \/\/ Define the elements to display in radio buttons using OUDSRadioPickerData.","    \/\/ This object has the same properties as the OUDSRadioItem,","    \/\/ and some of them are optional withdefault values set","    var someDataToPopulate: [OUDSRadioPickerData<String>] {","        [","            OUDSRadioPickerData<String>(tag: \"Choice_1\",","                                        label: \"Virgin Holy Lava\",","                                        additionalLabel: \"Very spicy\",","                                        helper: \"No alcohol, only tasty flavors\",","                                        icon: Image(systemName: \"flame\")),","","            OUDSRadioPickerData<String>(tag: \"Choice_2\",","                                        label: \"IPA beer\",","                                        helper: \"From Brewdog company\",","                                        icon: Image(systemName: \"dog.fill\")),","","            OUDSRadioPickerData<String>(tag: \"Choice_3\",","                                        label: \"Mineral water\",","                                        icon: Image(systemName: \"waterbottle.fill\")),","        ]","    }","","    \/\/ Prepare the selection, with a value previously selected","    \/\/ Use the data and the binding for the picker.","    @State var selection: String = \"Choice_1\"","","    \/\/ Here the picker is vertical","    OUDSRadioPicker(selection: $selection, radios: someDataToPopulate)"],"type":"codeListing","syntax":"swift"},{"text":"Switches","level":3,"anchor":"Switches","type":"heading"},{"text":"Switch (only)","level":4,"anchor":"Switch-only","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library proposes a new layout for the switch component. The native it not used anymore."},{"type":"text","text":" "},{"type":"text","text":"You can use a simple switch without any labels and images."}]},{"code":["    \/\/ A simple switch, with only an indicator","    \/\/ The component must be instanciated with a string parameter used as accessibility label that will be","    \/\/ vocalized by Voice Over. ","","    \/\/ The isOn parameter can have only two values: true (selected), false (unselected)","    OUDSSwitch(isOn: $isOn, accessibilityLabel: \"Select the element\")"],"type":"codeListing","syntax":"swift"},{"text":"Switch item","level":4,"anchor":"Switch-item","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library proposes also a switch which has in its layout some labels and icons."},{"type":"text","text":" "},{"type":"text","text":"The indicator can be leading or trailing."}]},{"code":["    \/\/ A leading switch with a label and exposing the state through isOn binding","    OUDSSwitchItem(i\"Hello world\", isOn: $isOn)","","    \/\/ A leading switch with a label, an helper text","    OUDSSwitchItem(\"Dead Robot Zombie Cop\",","                   isOn: $isOn,","                   helper: \"from Outer Space II\")","","    \/\/ A trailing switch with a label, an helper text, an icon, a divider and is about an error","    \/\/ with an inverse layout","    OUDSSwitchItem(\"We live in a fabled world\",","                   isOn: $isOn,","                   helper: \"Of dreaming boys and wide-eyed girls\",","                   icon: Image(decorative: \"ic_heart\"),","                   isReversed: true,","                   isError: true,","                   hasDivider: true)"],"type":"codeListing","syntax":"swift"},{"text":"Chips","level":3,"anchor":"Chips","type":"heading"},{"text":"Suggestion","level":4,"anchor":"Suggestion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library proposes suggestion chip component to make some predicitve or recommended selection."}]},{"code":["    \/\/ Suggestion chip with icon only ","    OUDSSuggestionChip(icon: Image(\"ic_heart\"), accessibilityLabel: \"Heart\") { \/* the action to process *\/ }","","    \/\/ Layout with text only","    OUDSSuggestionChip(text: \"Heart\") { \/* the action to process *\/ }","","    \/\/ Latout with text and icon","    OUDSSuggestionChip(icon: Image(\"ic_heart\"), text: \"Heart\") { \/* the action to process *\/ }"],"type":"codeListing","syntax":"swift"},{"text":"Filter","level":4,"anchor":"Filter","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library proposes filter chip component to make some filtering with selected or unselected options."}]},{"code":["    \/\/ Filter chip with icon only as selected ","    OUDSFilterChip(icon: Image(\"ic_heart\"), accessibilityLabel: \"Heart\", selected: true) { \/* the action to process *\/ }","","    \/\/ Filter chip with text only as not selected","    OUDSFilterChip(text: \"Heart\") { \/* the action to process *\/ }","","    \/\/ Filter chip with text and icon layout an in selected state","    OUDSFilterChip(icon: Image(\"ic_heart\"), text: \"Heart\", selected: true) { \/* the action to process *\/ }"],"type":"codeListing","syntax":"swift"},{"text":"Chips picker","level":4,"anchor":"Chips-picker","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The library proposes a chip picker to make easily filtering with two kinds of selection:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"single or none:","type":"text"}],"type":"strong"},{"text":" to select or unselect one option only","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"single:","type":"text"}],"type":"strong"},{"text":" to select at least one option","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"multiple"}]},{"type":"text","text":" to select several options"}]}]}]},{"code":["    \/\/ Define the elements to display in filter chip using OUDSChipPickerData.","    enum Drink: String, CaseIterable {","        case virginHolyLava, ipaBeer, mineralWater","    }","","    var someDataToPopulate: [OUDSChipPickerData<Drink>] {","         [","             OUDSChipPickerData(tag: Drink.virginHolyLava,","                                layout: .textAndIcon(\"Virgin Holy Lava\", icon: Image(systemName: \"flame\")),","","             OUDSChipPickerData(tag: Dring.ipaBeer,","                                layout: .textAndIcon(\"IPA Beer\", icon: Image(systemName: \"dog.fill\")),","","             OUDSChipPickerData(tag: Drink.mineralWater,","                                layout: .textAndIcon(\"Mineral water\", icon: Image(systemName: \"waterbottle.fill\")),","         ]","     }","","    \/\/ MARK: - Simple selection, one or zero","","    \/\/ Prepare the selection, with a value previously selected","    \/\/ Use the data and the binding for the picker.","    @State var selection: Drink? = .mineralWater","","    \/\/ Here the picker with title, selection and data","    OUDSChipPicker(title: Select a drink, selection: $selection, chips: someDataToPopulate)","","    \/\/ MARK: - Simple selection","","    \/\/ Prepare the selection, with a value previously selected","    \/\/ Use the data and the binding for the picker.","    @State var selection: Drink = .mineralWater","","    \/\/ Here the picker with title, selection and data","    OUDSChipPicker(title: Select a drink, selection: $selection, chips: someDataToPopulate)","","    \/\/ MARK: - Multiple selection","","    \/\/ Prepare the selection, with a value previously selected","    \/\/ Use the data and the binding for the picker.","    @State var selections: [Drink] = [.mineralWater]","","    \/\/ Here the picker with title, selection and data","    OUDSChipPicker(title: Select a drink, selections: $selections, chips: someDataToPopulate)"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"sections":[],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/oudscomponents\/inputs"]}],"identifier":{"url":"doc:\/\/OUDSComponents\/documentation\/OUDSComponents\/Inputs","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/OUDSComponents\/documentation\/OUDSComponents"]]},"metadata":{"title":"Input","roleHeading":"Article","modules":[{"name":"OUDSComponents"}],"role":"article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Some components can be used for "},{"inlineContent":[{"text":"inputs","type":"text"}],"type":"strong"},{"type":"text","text":"."}],"references":{"doc://OUDSComponents/documentation/OUDSComponents":{"kind":"symbol","role":"collection","type":"topic","title":"OUDSComponents","url":"\/documentation\/oudscomponents","identifier":"doc:\/\/OUDSComponents\/documentation\/OUDSComponents","abstract":[{"type":"text","text":"The catalog of all components provided by OUDS. It contains also "},{"type":"codeVoice","code":"View"},{"type":"text","text":" extensions and "},{"type":"codeVoice","code":"ViewModifiers"},{"type":"text","text":" to apply tokens and styles on components and higher-level views."}]}}}