{"hierarchy":{"paths":[["doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/init(_:)","doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/init(light:dark:)"],"generated":true,"anchor":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/dark","doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/light"],"generated":true,"anchor":"Instance-Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/elevation(for:)","doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/isEqual(_:)"],"generated":true,"anchor":"Instance-Methods"}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/OUDSTokensSemantic\/objc(cs)NSObject"],"kind":"relationships","type":"inheritsFrom"},{"title":"Conforms To","identifiers":["doc:\/\/OUDSTokensSemantic\/objc(pl)NSObject","doc:\/\/OUDSTokensSemantic\/s7CVarArgP","doc:\/\/OUDSTokensSemantic\/s28CustomDebugStringConvertibleP","doc:\/\/OUDSTokensSemantic\/s23CustomStringConvertibleP","doc:\/\/OUDSTokensSemantic\/SQ","doc:\/\/OUDSTokensSemantic\/SH","doc:\/\/OUDSTokensSemantic\/s8SendableP"],"kind":"relationships","type":"conformsTo"}],"abstract":[{"text":"Semantic tokens which will wrap a combination of ","type":"text"},{"code":"ElevationCompositeRawToken","type":"codeVoice"},{"text":" depending to color scheme (i.e. light mode or dark mode)","type":"text"},{"text":" ","type":"text"},{"text":"Kind of composite token with multiple values, but not named “composite” because this word is already used in the design system.","type":"text"},{"text":" ","type":"text"},{"text":"Allows to gather the multiple-value tokens from ","type":"text"},{"inlineContent":[{"type":"text","text":"Figma"}],"type":"emphasis"},{"text":" inside one object.","type":"text"},{"text":" ","type":"text"},{"text":"If an elevation token exists with its value depending to the color scheme, it must be packed in such ``MultipleElevationCompositeRawTokens`","type":"text"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/oudstokenssemantic\/multipleelevationcompositerawtokens"]}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MultipleElevationCompositeRawTokens"}]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"codeListing","syntax":"swift","code":["        \/\/ Assuming in Figma with have a elevation semantic token elevationNone,","        \/\/ with values depending to color scheme. These values are defined as elevation raw tokens.","        let elevationBottom_0 = ElevationCompositeRawToken(x: elevationX0, y: elevationY0, blur: elevationBlur0, color: ColorRawTokens.colorOpacityBlack0)","        let elevationBottom_1_100 = ElevationCompositeRawToken(x: elevationX0, y: elevationY100, blur: elevationBlur200, color: ColorRawTokens.colorOpacityBlack100)","","        \/\/ Then the develoment team declares an \"higher\" level elevation semantic token","        \/\/ inside ElevationCompositeSemanticTokens protocol,","        \/\/ and defined inside OrangeTheme+ElevationCompositeSemanticTokens extension","        \/\/ ElevationCompositeSemanticToken is a typealias for MultipleElevationCompositeRawTokens to keep same grammar as design kit","        var elevationNone: ElevationCompositeSemanticToken {","            ElevationCompositeSemanticToken(light: elevationBottom_0, dark: elevationBottom_1_100)","        }","","        \/\/ If the same elevation is used whatever the color scheme is","        var elevationNone: ElevationCompositeSemanticToken {","            ElevationCompositeSemanticToken(elevationBottom_0)","        }"]},{"type":"codeListing","syntax":"swift","code":["        \/\/ The theme exposes both generated elevation semantic tokens and \"crafted\" higher level elevation semantic tokens.","        \/\/ It is recommended to use the higher level version as it is less error-prone.","","        @Environment(\\.theme) var theme","        @Environment(\\.colorScheme) var colorScheme","","        \/\/ Given you want to apply the elevation token \"elevationRaised\"","        var body: some View {","            \/\/ Apply the token of elevation for the shadow effect without managing yourself the color scheme","            Rectangle()","                .shadow(elevation: theme.elevations.elevationRaised))","        }"]},{"type":"codeListing","syntax":"swift","code":["    \/\/ Or get the token depending to the color scheme and do whatever you want with","    theme.elevations.elevationRaised.elevation(for: colorScheme)"]},{"inlineContent":[{"type":"text","text":"The case of this "},{"type":"codeVoice","code":"MultipleElevationCompositeRawTokens"},{"type":"text","text":" is quite particular because in fact it contains "},{"type":"codeVoice","code":"MultipleElevationCompositeRawTokens"},{"type":"text","text":" (i.e. raw tokens) instead of semantic tokens."},{"type":"text","text":" "},{"type":"text","text":"In fact only the "},{"type":"emphasis","inlineContent":[{"text":"color","type":"text"}]},{"type":"text","text":" of the elevation effect vary depending to the color scheme,"},{"type":"text","text":" "},{"type":"text","text":"but in the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Figma"}]},{"type":"text","text":" kit this is composite raw tokens which are defined for ligh and dark mode as only one token."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"0.8.0","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Since","style":"note"}],"kind":"content"}],"metadata":{"roleHeading":"Class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MultipleElevationCompositeRawTokens","kind":"identifier"}],"externalID":"c:@M@OUDSTokensSemantic@objc(cs)MultipleElevationCompositeRawTokens","role":"symbol","title":"MultipleElevationCompositeRawTokens","modules":[{"name":"OUDSTokensSemantic"}],"navigatorTitle":[{"text":"MultipleElevationCompositeRawTokens","kind":"identifier"}],"symbolKind":"class"},"references":{"doc://OUDSTokensSemantic/documentation/OUDSTokensSemantic/MultipleElevationCompositeRawTokens/init(_:)":{"identifier":"doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/init(_:)","abstract":[{"text":"Initializes a new elevation composite raw token with the same value for light and dark modes","type":"text"}],"kind":"symbol","type":"topic","title":"init(_:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"c:@M@OUDSTokensRaw@objc(cs)ElevationCompositeRawToken","text":"ElevationCompositeRawToken","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/oudstokenssemantic\/multipleelevationcompositerawtokens\/init(_:)"},"doc://OUDSTokensSemantic/documentation/OUDSTokensSemantic/MultipleElevationCompositeRawTokens/elevation(for:)":{"type":"topic","url":"\/documentation\/oudstokenssemantic\/multipleelevationcompositerawtokens\/elevation(for:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"elevation"},{"kind":"text","text":"("},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7SwiftUI11ColorSchemeO","kind":"typeIdentifier","text":"ColorScheme"},{"kind":"text","text":") -> "},{"preciseIdentifier":"c:@M@OUDSTokensRaw@objc(cs)ElevationCompositeRawToken","kind":"typeIdentifier","text":"ElevationCompositeRawToken"}],"identifier":"doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/elevation(for:)","abstract":[{"type":"text","text":"Returns the right elevation according to the "},{"type":"codeVoice","code":"colorScheme"},{"type":"text","text":"."}],"role":"symbol","title":"elevation(for:)"},"doc://OUDSTokensSemantic/s28CustomDebugStringConvertibleP":{"identifier":"doc:\/\/OUDSTokensSemantic\/s28CustomDebugStringConvertibleP","title":"Swift.CustomDebugStringConvertible","type":"unresolvable"},"doc://OUDSTokensSemantic/documentation/OUDSTokensSemantic/MultipleElevationCompositeRawTokens":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MultipleElevationCompositeRawTokens"}],"identifier":"doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens","abstract":[{"type":"text","text":"Semantic tokens which will wrap a combination of "},{"type":"codeVoice","code":"ElevationCompositeRawToken"},{"type":"text","text":" depending to color scheme (i.e. light mode or dark mode)"},{"type":"text","text":" "},{"type":"text","text":"Kind of composite token with multiple values, but not named “composite” because this word is already used in the design system."},{"type":"text","text":" "},{"type":"text","text":"Allows to gather the multiple-value tokens from "},{"inlineContent":[{"type":"text","text":"Figma"}],"type":"emphasis"},{"type":"text","text":" inside one object."},{"type":"text","text":" "},{"type":"text","text":"If an elevation token exists with its value depending to the color scheme, it must be packed in such ``MultipleElevationCompositeRawTokens`"}],"role":"symbol","url":"\/documentation\/oudstokenssemantic\/multipleelevationcompositerawtokens","title":"MultipleElevationCompositeRawTokens","navigatorTitle":[{"kind":"identifier","text":"MultipleElevationCompositeRawTokens"}],"kind":"symbol","type":"topic"},"doc://OUDSTokensSemantic/documentation/OUDSTokensSemantic/MultipleElevationCompositeRawTokens/init(light:dark:)":{"identifier":"doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/init(light:dark:)","abstract":[{"type":"text","text":"Initializes a new elevation composite raw token with two values"}],"url":"\/documentation\/oudstokenssemantic\/multipleelevationcompositerawtokens\/init(light:dark:)","type":"topic","kind":"symbol","title":"init(light:dark:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"light"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@OUDSTokensRaw@objc(cs)ElevationCompositeRawToken","text":"ElevationCompositeRawToken"},{"kind":"text","text":", "},{"kind":"externalParam","text":"dark"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@OUDSTokensRaw@objc(cs)ElevationCompositeRawToken","text":"ElevationCompositeRawToken"},{"kind":"text","text":")"}]},"doc://OUDSTokensSemantic/documentation/OUDSTokensSemantic/MultipleElevationCompositeRawTokens/light":{"url":"\/documentation\/oudstokenssemantic\/multipleelevationcompositerawtokens\/light","abstract":[{"text":"For ","type":"text"},{"inlineContent":[{"type":"text","text":"light"}],"type":"strong"},{"text":" mode scheme","type":"text"}],"role":"symbol","title":"light","kind":"symbol","identifier":"doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/light","type":"topic","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"light"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@OUDSTokensRaw@objc(cs)ElevationCompositeRawToken","text":"ElevationCompositeRawToken"}]},"doc://OUDSTokensSemantic/objc(cs)NSObject":{"identifier":"doc:\/\/OUDSTokensSemantic\/objc(cs)NSObject","title":"ObjectiveC.NSObject","type":"unresolvable"},"doc://OUDSTokensSemantic/s7CVarArgP":{"identifier":"doc:\/\/OUDSTokensSemantic\/s7CVarArgP","title":"Swift.CVarArg","type":"unresolvable"},"doc://OUDSTokensSemantic/documentation/OUDSTokensSemantic/MultipleElevationCompositeRawTokens/isEqual(_:)":{"kind":"symbol","abstract":[{"text":"Returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"object"},{"text":" has the same ","type":"text"},{"type":"codeVoice","code":"light"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"dark"},{"text":" values and with ","type":"text"},{"type":"codeVoice","code":"object"},{"text":" ","type":"text"},{"text":"as a ","type":"text"},{"type":"codeVoice","code":"MultipleElevationCompositeRawTokens"},{"text":". Otherwise returns ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"isEqual"},{"text":" override is preferred for ","type":"text"},{"type":"codeVoice","code":"NSObject"},{"text":".","type":"text"}],"title":"isEqual(_:)","url":"\/documentation\/oudstokenssemantic\/multipleelevationcompositerawtokens\/isequal(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"isEqual"},{"kind":"text","text":"("},{"kind":"keyword","text":"Any"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"role":"symbol","identifier":"doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/isEqual(_:)","type":"topic"},"doc://OUDSTokensSemantic/documentation/OUDSTokensSemantic/MultipleElevationCompositeRawTokens/dark":{"url":"\/documentation\/oudstokenssemantic\/multipleelevationcompositerawtokens\/dark","title":"dark","type":"topic","abstract":[{"text":"For ","type":"text"},{"type":"strong","inlineContent":[{"text":"dark","type":"text"}]},{"text":" mode scheme","type":"text"}],"role":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dark","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:@M@OUDSTokensRaw@objc(cs)ElevationCompositeRawToken","text":"ElevationCompositeRawToken","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic\/MultipleElevationCompositeRawTokens\/dark"},"doc://OUDSTokensSemantic/documentation/OUDSTokensSemantic":{"title":"OUDSTokensSemantic","abstract":[{"type":"text","text":"These "},{"type":"emphasis","inlineContent":[{"text":"tokens","type":"text"}]},{"type":"text","text":" can be used mainly for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"component tokens"}]},{"type":"text","text":" to apply some style and configuration values ; today "},{"type":"emphasis","inlineContent":[{"text":"component tokens","type":"text"}]},{"type":"text","text":" or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"components"}]},{"type":"text","text":" are not defined yet."},{"type":"text","text":" "},{"type":"text","text":"They can be seen as an high level of usage with functional meanings."}],"role":"collection","url":"\/documentation\/oudstokenssemantic","identifier":"doc:\/\/OUDSTokensSemantic\/documentation\/OUDSTokensSemantic","type":"topic","kind":"symbol"},"doc://OUDSTokensSemantic/SQ":{"identifier":"doc:\/\/OUDSTokensSemantic\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://OUDSTokensSemantic/objc(pl)NSObject":{"identifier":"doc:\/\/OUDSTokensSemantic\/objc(pl)NSObject","title":"ObjectiveC.NSObjectProtocol","type":"unresolvable"},"doc://OUDSTokensSemantic/s8SendableP":{"identifier":"doc:\/\/OUDSTokensSemantic\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://OUDSTokensSemantic/s23CustomStringConvertibleP":{"identifier":"doc:\/\/OUDSTokensSemantic\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible","type":"unresolvable"},"doc://OUDSTokensSemantic/SH":{"identifier":"doc:\/\/OUDSTokensSemantic\/SH","title":"Swift.Hashable","type":"unresolvable"}}}