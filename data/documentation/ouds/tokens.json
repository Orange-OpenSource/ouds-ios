{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OUDS\/documentation\/OUDS\/Tokens"},"metadata":{"modules":[{"name":"OUDS"}],"role":"article","title":"Tokens","roleHeading":"Article"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"inlineContent":[{"text":"About responsabilities:","type":"text"}],"type":"paragraph"},{"syntax":"mermaid","type":"codeListing","code":["flowchart TD","    A(Raw token) --> |Contains primitive type SwiftUI value| B(Semantic token)","    B --> |Brings higher logic and functional meanings|C(Component token)","    C --> |Helps to make match between View and semantics|D(Component)"]},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"type":"codeListing","syntax":"mermaid","code":["flowchart TD","    A(colorFunctionalDodgerBlue500) --> |#26B2FF| B(sysColorBrandInformationDefault)","    B --> C(.informationIconbackgroundColor)","    C --> D(InformationModalView)"]},{"text":"Component tokens","type":"heading","level":2,"anchor":"Component-tokens"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tokens"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"\/OUDSTokensComponent"},{"type":"text","text":") can be used to apply some style and configuration values to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"components"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Thus if a component need to change for example its ","type":"text"},{"inlineContent":[{"type":"text","text":"background color"}],"type":"emphasis"},{"type":"text","text":", and if a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"component token"}]},{"text":" is used for it, then only the value of this ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"token","type":"text"}]},{"type":"text","text":" should be changed without any modification on the "},{"inlineContent":[{"type":"text","text":"component"}],"type":"emphasis"},{"type":"text","text":" definition."},{"type":"text","text":" "},{"inlineContent":[{"text":"Components","type":"text"}],"type":"emphasis"},{"text":" use ","type":"text"},{"inlineContent":[{"text":"component tokens","type":"text"}],"type":"emphasis"},{"type":"text","text":" exposed through the "},{"inlineContent":[{"text":"theme","type":"text"}],"type":"emphasis"},{"text":" to get their style values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Example with ","type":"text"},{"code":"FormsTextInputComponentToken","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","code":["public protocol FormsTextInputComponentToken {","    var ftiTitleFontWeight: TypographyFontWeightSemanticToken { get }","    var ftiTitleFontSize: TypographyFontSizeSemanticToken { get }","    var ftiTitleColor: ColorSemanticToken { get }","    ","    var ftiBorderColor: ColorSemanticToken { get }","    var ftiBorderStyle: BorderStyleSemanticToken { get }","    var ftiBorderWidth: BorderWidthSemanticToken { get }","}","","extension OUDSTheme: FormsTextInputComponentToken {","    private static let defaultBlack: ColorSemanticToken = ColorRawTokens.colorFunctionalBlack","    private static let defaultWhite: ColorSemanticToken = ColorRawTokens.colorFunctionalWhite","","    @objc open var ftiTitleFontWeight: TypographyFontWeightSemanticToken { fontWeightHeading }","    @objc open var ftiTitleFontSize: TypographyFontSizeSemanticToken { fontSizeLabelLarge }","    @objc open var ftiTitleColor: ColorSemanticToken { colorContentBrandPrimaryLight ?? Self.defaultBlack }","    ","    @objc open var ftiBorderColor: ColorSemanticToken { colorBorderEmphasisLight ?? Self.defaultBlack }","    @objc open var ftiBorderStyle: BorderStyleSemanticToken { borderStyleDefault }","    @objc open var ftiBorderWidth: BorderWidthSemanticToken { borderWidthThin }","}",""],"syntax":"swift"},{"type":"heading","text":"Semantic tokens","level":2,"anchor":"Semantic-tokens"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These "},{"type":"emphasis","inlineContent":[{"text":"tokens","type":"text"}]},{"text":" (","type":"text"},{"type":"codeVoice","code":"OUDSTokensSemantic"},{"type":"text","text":") can be used mainly for "},{"type":"emphasis","inlineContent":[{"text":"component tokens","type":"text"}]},{"type":"text","text":" to apply some style and configuration values."},{"text":" ","type":"text"},{"type":"text","text":"They can be seen as an high level of usage with functional meanings."},{"type":"text","text":" "},{"text":"Thus if we need for example to change a warning color, supposing this color is defined as a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"semantic token","type":"text"}]},{"type":"text","text":", we onlyhave to change its assigned value and all components using the "},{"inlineContent":[{"type":"text","text":"semantic token"}],"type":"emphasis"},{"type":"text","text":" won’t be impacted in their definition."}]},{"inlineContent":[{"text":"In addition, there are hundreds of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"semantics tokens"}]},{"text":" and we needed to add them to the abstract root theme using extensions for clarity reasons to prevent to have a ","type":"text"},{"inlineContent":[{"text":"Swift class","type":"text"}],"type":"emphasis"},{"type":"text","text":" with thousands of lines. Each "},{"inlineContent":[{"type":"text","text":"raw token"}],"type":"emphasis"},{"text":" “family” is then declared in its dedicated ","type":"text"},{"inlineContent":[{"text":"Swift protocol","type":"text"}],"type":"emphasis"},{"type":"text","text":" any root theme must implement. Because we choose to split responsabilities and objects into their own modules, we faced troubles to make possible for children themes to override properties declared in "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocols"}]},{"type":"text","text":" and defined in "},{"type":"emphasis","inlineContent":[{"text":"extensions","type":"text"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"That is the reason why tokens are exposed as ","type":"text"},{"code":"@objc open","type":"codeVoice"},{"text":" to be available and oveeridable anywhere.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To keep the same semantics as the ones used in our specifications, "},{"inlineContent":[{"type":"text","text":"typealias"}],"type":"emphasis"},{"text":" are used to as to make the links to ","type":"text"},{"inlineContent":[{"text":"primitive types","type":"text"}],"type":"emphasis"},{"type":"text","text":" and our logic of "},{"inlineContent":[{"text":"tokens","type":"text"}],"type":"emphasis"},{"type":"text","text":". These type aliases are avaialble for those who want too make their own theme."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example with "},{"code":"\/OUDSTokensComponent\/ColorSemanticTokens","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["protocol ColorSemanticTokens {","    var sysColorBrandNeutralMutedWhite: ColorAliasSemanticToken? { get }","}","","extension OUDSTheme: ColorSemanticTokens {","","    @objc open var sysColorBrandNeutralMutedWhite: ColorAliasSemanticToken? { ColorRawTokens.colorFunctionalWhite }","}"]},{"anchor":"Raw-tokens","level":2,"type":"heading","text":"Raw tokens"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Raw tokens","type":"text"}]},{"type":"text","text":" ("},{"type":"text","text":"doc:\/OUDSTokensRaw"},{"text":") are smallest ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"tokens","type":"text"}]},{"type":"text","text":" possible. They are associated to raw values and will be finaly the values assigned to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"components"}]},{"text":" properties.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In fact, we choose to use as most as possible primitive types for raw values, like ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"code":"Double","type":"codeVoice"},{"type":"text","text":", "},{"code":"CGFloat","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"text":" so as to handle the smallest types with few impacts on the memory for ecodesign principles. Indeed with hundreds of raw tokens, it will be more efficient to store primitive small types than structs or classes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"So we expose also in higher level some properties so as to convert when needed some of these types to ","type":"text"},{"type":"codeVoice","code":"SwiftUI"},{"type":"text","text":" types (like "},{"type":"codeVoice","code":"Font.Weight"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Color"},{"text":").","type":"text"}]},{"inlineContent":[{"text":"To keep the same semantics as the ones used in our specifications, ","type":"text"},{"inlineContent":[{"type":"text","text":"typealias"}],"type":"emphasis"},{"type":"text","text":" are used to as to make the links to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"primitive types"}]},{"text":" and our logic of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"tokens"}]},{"text":". These type aliases are avaialble for those who want too make their own theme.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using more simple and primitive types will help also to test the library. With also type aliases we force users to use our types and not higher level types like "},{"inlineContent":[{"text":"SwiftUI","type":"text"}],"type":"emphasis"},{"type":"text","text":" types."}]},{"inlineContent":[{"type":"text","text":"Example for "},{"code":"ColorRawTokens","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["\/\/ Define types for color raw tokens","public typealias ColorRawToken = String","","public enum ColorRawTokens { \/\/ Gathers all color raw tokens","","    public static let colorFunctionalWhite: ColorRawToken = \"#FFFFFF\"","    public static let colorFunctionalScarlet400: ColorRawToken = \"#FF4D4E\"","    public static let colorTransparentBlack0: ColorRawToken = apply(opacity: OpacityRawTokens.opacity0, on: colorFunctionalBlack)","    ...","}","","extension String {","    public var color: Color {","        Color(hexadecimalCode: self)","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/ouds\/tokens"]}],"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/OUDS\/documentation\/OUDS\/GettingStarted","doc:\/\/OUDS\/documentation\/OUDS\/Themes","doc:\/\/OUDS\/documentation\/OUDS\/Components","doc:\/\/OUDS\/documentation\/OUDS\/Modules"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/OUDS\/documentation\/OUDS"]]},"abstract":[{"type":"text","text":"Design tokens represent the small, repeated design decisions that make up a design system’s visual style. Tokens replace static values, such as hex codes for color, with self-explanatory names."}],"kind":"article","references":{"doc://OUDS/documentation/OUDS":{"abstract":[{"text":"Full Design System to build Orange Mobile Application.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/ouds","identifier":"doc:\/\/OUDS\/documentation\/OUDS","role":"collection","title":"OUDS"},"doc://OUDS/documentation/OUDS/Themes":{"type":"topic","abstract":[{"type":"emphasis","inlineContent":[{"text":"Themes","type":"text"}]},{"type":"text","text":" are applications of specific values for "},{"inlineContent":[{"text":"components tokens","type":"text"}],"type":"emphasis"},{"text":" and ","type":"text"},{"inlineContent":[{"type":"text","text":"semantic tokens"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"theme"}]},{"text":" contains any relevant ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"semantic tokens","type":"text"}]},{"text":" and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"component tokens","type":"text"}]},{"text":" which can be sued for components rendering.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"theme","type":"text"}]},{"text":" has also ","type":"text"},{"inlineContent":[{"type":"text","text":"raw tokens"}],"type":"emphasis"},{"text":" associated to primitive types so as to give to ","type":"text"},{"inlineContent":[{"text":"components","type":"text"}],"type":"emphasis"},{"type":"text","text":", written with "},{"type":"emphasis","inlineContent":[{"text":"SwiftUI","type":"text"}]},{"type":"text","text":", the needed values in the suitable type. A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"theme"}]},{"text":" can add for itself any new ","type":"text"},{"inlineContent":[{"type":"text","text":"tokens"}],"type":"emphasis"},{"text":".","type":"text"}],"kind":"article","role":"article","identifier":"doc:\/\/OUDS\/documentation\/OUDS\/Themes","title":"Themes","url":"\/documentation\/ouds\/themes"},"doc://OUDS/documentation/OUDS/GettingStarted":{"type":"topic","role":"article","identifier":"doc:\/\/OUDS\/documentation\/OUDS\/GettingStarted","abstract":[{"type":"text","text":"Howto: use to the get package as dependancy in application, import library elements."}],"url":"\/documentation\/ouds\/gettingstarted","kind":"article","title":"Getting Started with OUDS"},"doc://OUDS/documentation/OUDS/Modules":{"title":"Modules","role":"article","identifier":"doc:\/\/OUDS\/documentation\/OUDS\/Modules","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"module"}]},{"text":" can be seen as a set of features and components to fill a need.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"There is not module yet."}],"kind":"article","url":"\/documentation\/ouds\/modules","type":"topic"},"doc://OUDS/documentation/OUDS/Components":{"kind":"article","url":"\/documentation\/ouds\/components","type":"topic","title":"Components","abstract":[{"inlineContent":[{"text":"Components","type":"text"}],"type":"emphasis"},{"type":"text","text":" are defined here and can be integrated in applications."}],"identifier":"doc:\/\/OUDS\/documentation\/OUDS\/Components","role":"article"}}}