//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import Foundation
import OUDSTokensComponent
import OUDSTokensSemantic

// ðŸ§¬ Tokens version: 1.3.0 (Orange Business Tools brand)
// ðŸ¤– Generated by Tokenator

// swiftlint:disable line_length

extension OrangeBusinessToolsThemeSwitchComponentTokensProvider: SwitchComponentTokens {
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryNeutralMutedWhite, dark: colors.colorRepositoryNeutralEmphasizedHighest)
    @objc public final var switchColorCursor: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryNeutralMutedWhite, dark: colors.colorRepositoryNeutralEmphasizedHighest) }
    /// Has for value token colors.colorContentDefault
    @objc public final var switchColorCheck: MultipleColorSemanticTokens { colors.colorContentDefault }
    /// Has for value token colors.colorContentDefault
    @objc public final var switchColorCheckInteraction: MultipleColorSemanticTokens { colors.colorContentDefault }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryPositiveDefault, dark: colors.colorRepositoryPositiveHigh)
    @objc public final var switchColorTrackSelected: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryPositiveDefault, dark: colors.colorRepositoryPositiveHigh) }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryPositiveHigh, dark: colors.colorRepositoryPositiveLow)
    @objc public final var switchColorTrackSelectedInteraction: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryPositiveHigh, dark: colors.colorRepositoryPositiveLow) }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityBlackMediumHigh, dark: colors.colorRepositoryOpacityWhiteHigh)
    @objc public final var switchColorTrackUnselected: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityBlackMediumHigh, dark: colors.colorRepositoryOpacityWhiteHigh) }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityBlackHigh, dark: colors.colorRepositoryOpacityWhiteHigher)
    @objc public final var switchColorTrackUnselectedInteraction: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityBlackHigh, dark: colors.colorRepositoryOpacityWhiteHigher) }
    /// Has for value token borders.borderRadiusPill
    @objc public final var switchBorderRadiusCursor: BorderRadiusSemanticToken { borders.borderRadiusPill }
    /// Has for value token borders.borderRadiusPill
    @objc public final var switchBorderRadiusTrack: BorderRadiusSemanticToken { borders.borderRadiusPill }
    /// Has for value token opacities.opacityOpaque
    @objc public final var switchOpacityCheck: OpacitySemanticToken { opacities.opacityOpaque }
    /// Has for value token spaces.spacePaddingInline3xs
    @objc public final var switchSpacePaddingInlineSelected: SpaceSemanticToken { spaces.spacePaddingInline3xs }
    /// Has for value token spaces.spacePaddingInlineXs
    @objc public final var switchSpacePaddingInlineUnselected: SpaceSemanticToken { spaces.spacePaddingInlineXs }
    /// Has for value token dimensions.dimension2xl
    @objc public final var switchSizeMinWidth: SizeSemanticToken { dimensions.dimension2xl }
    /// Has for value token dimensions.dimensionXs
    @objc public final var switchSizeMinHeight: SizeSemanticToken { dimensions.dimensionXs }
    /// Has for value token sizes.sizeMinInteractiveArea
    @objc public final var switchSizeMinHeightInteractiveArea: SizeSemanticToken { sizes.sizeMinInteractiveArea }
    /// Has for value token dimensions.dimensionXs
    @objc public final var switchSizeMaxHeight: SizeSemanticToken { dimensions.dimensionXs }
    /// Has for value token dimensions.dimension3xs
    @objc public final var switchSizeWidthCursorSelected: SizeSemanticToken { dimensions.dimension3xs }
    /// Has for value token dimensions.dimension5xs
    @objc public final var switchSizeWidthCursorUnselected: SizeSemanticToken { dimensions.dimension5xs }
    /// Has for value token dimensions.dimensionXs
    @objc public final var switchSizeWidthCursorSelectedPressed: SizeSemanticToken { dimensions.dimensionXs }
    /// Has for value token dimensions.dimension3xs
    @objc public final var switchSizeWidthCursorUnselectedPressed: SizeSemanticToken { dimensions.dimension3xs }
    /// Has for value token dimensions.dimension2xl
    @objc public final var switchSizeWidthTrack: SizeSemanticToken { dimensions.dimension2xl }
    /// Has for value token dimensions.dimension3xs
    @objc public final var switchSizeHeightCursorSelected: SizeSemanticToken { dimensions.dimension3xs }
    /// Has for value token dimensions.dimension5xs
    @objc public final var switchSizeHeightCursorUnselected: SizeSemanticToken { dimensions.dimension5xs }
    /// Has for value token dimensions.dimensionXs
    @objc public final var switchSizeHeightTrack: SizeSemanticToken { dimensions.dimensionXs }
}

// swiftlint:enable line_length
