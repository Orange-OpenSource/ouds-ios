//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import Foundation
import OUDSTokensComponent
import OUDSTokensRaw
import OUDSTokensSemantic

// ðŸ§± Tokens version: 1.1.0
// ðŸ¤– Generated by Tokenator

extension SoshThemeButtonComponentTokensProvider: ButtonComponentTokens {
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBgDefaultEnabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBgDefaultHover: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBgDefaultPressed: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBgDefaultLoading: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBgDefaultDisabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBgDefaultFocus: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBgMinimalEnabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorActionSupportHover
    @objc public var buttonColorBgMinimalHover: MultipleColorSemanticTokens { colors.colorActionSupportHover }
    /// Has for value token colors.colorActionSupportPressed
    @objc public var buttonColorBgMinimalPressed: MultipleColorSemanticTokens { colors.colorActionSupportPressed }
    /// Has for value token colors.colorActionSupportLoading
    @objc public var buttonColorBgMinimalLoading: MultipleColorSemanticTokens { colors.colorActionSupportLoading }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBgMinimalDisabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorActionSupportFocus
    @objc public var buttonColorBgMinimalFocus: MultipleColorSemanticTokens { colors.colorActionSupportFocus }
    /// Has for value token colors.colorActionEnabled
    @objc public var buttonColorContentDefaultEnabled: MultipleColorSemanticTokens { colors.colorActionEnabled }
    /// Has for value token colors.colorActionHover
    @objc public var buttonColorContentDefaultHover: MultipleColorSemanticTokens { colors.colorActionHover }
    /// Has for value token colors.colorActionPressed
    @objc public var buttonColorContentDefaultPressed: MultipleColorSemanticTokens { colors.colorActionPressed }
    /// Has for value token colors.colorActionLoading
    @objc public var buttonColorContentDefaultLoading: MultipleColorSemanticTokens { colors.colorActionLoading }
    /// Has for value token colors.colorActionDisabled
    @objc public var buttonColorContentDefaultDisabled: MultipleColorSemanticTokens { colors.colorActionDisabled }
    /// Has for value token colors.colorActionFocus
    @objc public var buttonColorContentDefaultFocus: MultipleColorSemanticTokens { colors.colorActionFocus }
    /// Has for value token colors.colorActionEnabled
    @objc public var buttonColorContentMinimalEnabled: MultipleColorSemanticTokens { colors.colorActionEnabled }
    /// Has for value token colors.colorActionHover
    @objc public var buttonColorContentMinimalHover: MultipleColorSemanticTokens { colors.colorActionHover }
    /// Has for value token colors.colorActionPressed
    @objc public var buttonColorContentMinimalPressed: MultipleColorSemanticTokens { colors.colorActionPressed }
    /// Has for value token colors.colorContentDefault
    @objc public var buttonColorContentMinimalLoading: MultipleColorSemanticTokens { colors.colorContentDefault }
    /// Has for value token colors.colorActionDisabled
    @objc public var buttonColorContentMinimalDisabled: MultipleColorSemanticTokens { colors.colorActionDisabled }
    /// Has for value token colors.colorActionFocus
    @objc public var buttonColorContentMinimalFocus: MultipleColorSemanticTokens { colors.colorActionFocus }
    /// Has for value token colors.colorActionEnabled
    @objc public var buttonColorBorderDefaultEnabled: MultipleColorSemanticTokens { colors.colorActionEnabled }
    /// Has for value token colors.colorActionHover
    @objc public var buttonColorBorderDefaultHover: MultipleColorSemanticTokens { colors.colorActionHover }
    /// Has for value token colors.colorActionPressed
    @objc public var buttonColorBorderDefaultPressed: MultipleColorSemanticTokens { colors.colorActionPressed }
    /// Has for value token colors.colorActionLoading
    @objc public var buttonColorBorderDefaultLoading: MultipleColorSemanticTokens { colors.colorActionLoading }
    /// Has for value token colors.colorActionDisabled
    @objc public var buttonColorBorderDefaultDisabled: MultipleColorSemanticTokens { colors.colorActionDisabled }
    /// Has for value token colors.colorActionFocus
    @objc public var buttonColorBorderDefaultFocus: MultipleColorSemanticTokens { colors.colorActionFocus }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBorderMinimalEnabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBorderMinimalHover: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBorderMinimalPressed: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBorderMinimalLoading: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBorderMinimalDisabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc public var buttonColorBorderMinimalFocus: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token borders.borderRadiusDefault
    @objc public var buttonBorderRadius: BorderRadiusSemanticToken { borders.borderRadiusDefault }
    /// Has for value token borders.borderWidthDefault
    @objc public var buttonBorderWidthDefault: BorderWidthSemanticToken { borders.borderWidthDefault }
    /// Has for value token borders.borderWidthMedium
    @objc public var buttonBorderWidthDefaultInteraction: BorderWidthSemanticToken { borders.borderWidthMedium }
    /// Has for value token borders.borderWidthNone
    @objc public var buttonBorderWidthDefaultInteractionMono: BorderWidthSemanticToken { borders.borderWidthNone }
    /// Has for value token borders.borderWidthNone
    @objc public var buttonBorderWidthMinimal: BorderWidthSemanticToken { borders.borderWidthNone }
    /// Has for value token borders.borderWidthNone
    @objc public var buttonBorderWidthMinimalInteraction: BorderWidthSemanticToken { borders.borderWidthNone }
    /// Has for value token spaces.spaceInsetMd
    @objc public var buttonSpaceInsetIconOnly: SpaceSemanticToken { spaces.spaceInsetMd }
    /// Has for value token spaces.spacePaddingBlockMd
    @objc public var buttonSpacePaddingBlock: SpaceSemanticToken { spaces.spacePaddingBlockMd }
    /// Has for value token spaces.spacePaddingInline3xl
    @objc public var buttonSpacePaddingInlineStartIconEnd: SpaceSemanticToken { spaces.spacePaddingInline3xl }
    /// Has for value token spaces.spacePaddingInline3xl
    @objc public var buttonSpacePaddingInlineEndIconStart: SpaceSemanticToken { spaces.spacePaddingInline3xl }
    /// Has for value token spaces.spacePaddingInline4xl
    @objc public var buttonSpacePaddingInlineIconNone: SpaceSemanticToken { spaces.spacePaddingInline4xl }
    /// Has for value token spaces.spacePaddingInlineXl
    @objc public var buttonSpacePaddingInlineIconStart: SpaceSemanticToken { spaces.spacePaddingInlineXl }
    /// Has for value token spaces.spacePaddingInlineLg
    @objc public var buttonSpacePaddingInlineArrowStart: SpaceSemanticToken { spaces.spacePaddingInlineLg }
    /// Has for value token spaces.spacePaddingInlineLg
    @objc public var buttonSpacePaddingInlineArrowEnd: SpaceSemanticToken { spaces.spacePaddingInlineLg }
    /// Has for value token spaces.spaceColumnGapSm
    @objc public var buttonSpaceColumnGapIcon: SpaceSemanticToken { spaces.spaceColumnGapSm }
    /// Has for value token spaces.spaceColumnGapXs
    @objc public var buttonSpaceColumnGapArrow: SpaceSemanticToken { spaces.spaceColumnGapXs }
    /// Has for value token sizes.sizeIconWithLabelLargeSizeXs
    @objc public var buttonSizeIcon: SizeSemanticToken { sizes.sizeIconWithLabelLargeSizeXs }
    /// Has for value token sizes.sizeIconWithLabelLargeSizeSm
    @objc public var buttonSizeIconOnly: SizeSemanticToken { sizes.sizeIconWithLabelLargeSizeSm }
    /// Has for value token sizes.sizeIconWithLabelLargeSizeXs
    @objc public var buttonSizeLoader: SizeSemanticToken { sizes.sizeIconWithLabelLargeSizeXs }
    /// Has for value token sizes.sizeMinInteractiveArea
    @objc public var buttonSizeMinHeight: SizeSemanticToken { sizes.sizeMinInteractiveArea }
    /// Has for value token sizes.sizeMinInteractiveArea
    @objc public var buttonSizeMinWidth: SizeSemanticToken { sizes.sizeMinInteractiveArea }
    /// Has for value token sizes.sizeMinInteractiveArea
    @objc public var buttonSizeMaxHeightIconOnly: SizeSemanticToken { sizes.sizeMinInteractiveArea }
}
