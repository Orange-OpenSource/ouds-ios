//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import Foundation
import OUDSTokensComponent
import OUDSTokensSemantic

// ðŸ§¬ Tokens version: 1.1.0 (Wireframe brand)
// ðŸ¤– Generated by Tokenator

// swiftlint:disable line_length

extension WireframeThemeButtonComponentTokensProvider: ButtonComponentTokens {
    /// Has for value token colors.colorSurfaceBrandSecondary
    @objc open var buttonColorBgBrandEnabled: MultipleColorSemanticTokens { colors.colorSurfaceBrandSecondary }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityPrimaryLowest, dark: colors.colorRepositoryOpacityPrimaryMedium)
    @objc open var buttonColorBgDefaultEnabled: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityPrimaryLowest, dark: colors.colorRepositoryOpacityPrimaryMedium) }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityPrimaryLower, dark: colors.colorRepositoryOpacityPrimaryHigh)
    @objc open var buttonColorBgDefaultHover: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityPrimaryLower, dark: colors.colorRepositoryOpacityPrimaryHigh) }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityPrimaryLow, dark: colors.colorRepositoryOpacityPrimaryHigher)
    @objc open var buttonColorBgDefaultPressed: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityPrimaryLow, dark: colors.colorRepositoryOpacityPrimaryHigher) }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityPrimaryLow, dark: colors.colorRepositoryOpacityPrimaryHigher)
    @objc open var buttonColorBgDefaultLoading: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityPrimaryLow, dark: colors.colorRepositoryOpacityPrimaryHigher) }
    /// Has for value token colors.colorActionDisabled
    @objc open var buttonColorBgDefaultDisabled: MultipleColorSemanticTokens { colors.colorActionDisabled }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityPrimaryLower, dark: colors.colorRepositoryOpacityPrimaryHigh)
    @objc open var buttonColorBgDefaultFocus: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryOpacityPrimaryLower, dark: colors.colorRepositoryOpacityPrimaryHigh) }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var buttonColorBgMinimalEnabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorActionSupportHover
    @objc open var buttonColorBgMinimalHover: MultipleColorSemanticTokens { colors.colorActionSupportHover }
    /// Has for value token colors.colorActionSupportPressed
    @objc open var buttonColorBgMinimalPressed: MultipleColorSemanticTokens { colors.colorActionSupportPressed }
    /// Has for value token colors.colorActionSupportLoading
    @objc open var buttonColorBgMinimalLoading: MultipleColorSemanticTokens { colors.colorActionSupportLoading }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var buttonColorBgMinimalDisabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorActionSupportFocus
    @objc open var buttonColorBgMinimalFocus: MultipleColorSemanticTokens { colors.colorActionSupportFocus }
    /// Has for value token colors.colorContentOnBrandSecondary
    @objc open var buttonColorContentBrandEnabled: MultipleColorSemanticTokens { colors.colorContentOnBrandSecondary }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryPrimaryHigh, dark: colors.colorRepositoryPrimaryLower)
    @objc open var buttonColorContentDefaultEnabled: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryPrimaryHigh, dark: colors.colorRepositoryPrimaryLower) }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryPrimaryHigh, dark: colors.colorRepositoryPrimaryLower)
    @objc open var buttonColorContentDefaultHover: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryPrimaryHigh, dark: colors.colorRepositoryPrimaryLower) }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryPrimaryHigh, dark: colors.colorRepositoryPrimaryLower)
    @objc open var buttonColorContentDefaultPressed: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryPrimaryHigh, dark: colors.colorRepositoryPrimaryLower) }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryPrimaryHigh, dark: colors.colorRepositoryPrimaryLower)
    @objc open var buttonColorContentDefaultLoading: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryPrimaryHigh, dark: colors.colorRepositoryPrimaryLower) }
    /// Has for value token colors.colorActionDisabled
    @objc open var buttonColorContentDefaultDisabled: MultipleColorSemanticTokens { colors.colorActionDisabled }
    /// Has for value token MultipleColorSemanticTokens(light: colors.colorRepositoryPrimaryHigh, dark: colors.colorRepositoryPrimaryLower)
    @objc open var buttonColorContentDefaultFocus: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colors.colorRepositoryPrimaryHigh, dark: colors.colorRepositoryPrimaryLower) }
    /// Has for value token colors.colorActionEnabled
    @objc open var buttonColorContentMinimalEnabled: MultipleColorSemanticTokens { colors.colorActionEnabled }
    /// Has for value token colors.colorActionHover
    @objc open var buttonColorContentMinimalHover: MultipleColorSemanticTokens { colors.colorActionHover }
    /// Has for value token colors.colorActionPressed
    @objc open var buttonColorContentMinimalPressed: MultipleColorSemanticTokens { colors.colorActionPressed }
    /// Has for value token colors.colorActionLoading
    @objc open var buttonColorContentMinimalLoading: MultipleColorSemanticTokens { colors.colorActionLoading }
    /// Has for value token colors.colorActionDisabled
    @objc open var buttonColorContentMinimalDisabled: MultipleColorSemanticTokens { colors.colorActionDisabled }
    /// Has for value token colors.colorActionFocus
    @objc open var buttonColorContentMinimalFocus: MultipleColorSemanticTokens { colors.colorActionFocus }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var buttonColorBorderDefaultEnabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var buttonColorBorderDefaultHover: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var buttonColorBorderDefaultPressed: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var buttonColorBorderDefaultLoading: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var buttonColorBorderDefaultDisabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var buttonColorBorderDefaultFocus: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token borders.borderRadiusDefault
    @objc open var buttonBorderRadiusDefault: BorderRadiusSemanticToken { borders.borderRadiusDefault }
    /// Has for value token borders.borderRadiusDefault
    @objc open var buttonBorderRadiusRounded: BorderRadiusSemanticToken { borders.borderRadiusDefault }
    /// Has for value token borders.borderWidthNone
    @objc open var buttonBorderWidthDefault: BorderWidthSemanticToken { borders.borderWidthNone }
    /// Has for value token borders.borderWidthNone
    @objc open var buttonBorderWidthDefaultInteraction: BorderWidthSemanticToken { borders.borderWidthNone }
    /// Has for value token borders.borderWidthNone
    @objc open var buttonBorderWidthDefaultInteractionMono: BorderWidthSemanticToken { borders.borderWidthNone }
    /// Has for value token spaces.spaceInsetMd
    @objc open var buttonSpaceInsetIconOnly: SpaceSemanticToken { spaces.spaceInsetMd }
    /// Has for value token spaces.spacePaddingBlockMd
    @objc open var buttonSpacePaddingBlock: SpaceSemanticToken { spaces.spacePaddingBlockMd }
    /// Has for value token spaces.spacePaddingInline3xl
    @objc open var buttonSpacePaddingInlineStartIconEnd: SpaceSemanticToken { spaces.spacePaddingInline3xl }
    /// Has for value token spaces.spacePaddingInline3xl
    @objc open var buttonSpacePaddingInlineEndIconStart: SpaceSemanticToken { spaces.spacePaddingInline3xl }
    /// Has for value token spaces.spacePaddingInline4xl
    @objc open var buttonSpacePaddingInlineIconNone: SpaceSemanticToken { spaces.spacePaddingInline4xl }
    /// Has for value token spaces.spacePaddingInlineXl
    @objc open var buttonSpacePaddingInlineIconStart: SpaceSemanticToken { spaces.spacePaddingInlineXl }
    /// Has for value token spaces.spacePaddingInlineLg
    @objc open var buttonSpacePaddingInlineChevronStart: SpaceSemanticToken { spaces.spacePaddingInlineLg }
    /// Has for value token spaces.spacePaddingInlineLg
    @objc open var buttonSpacePaddingInlineChevronEnd: SpaceSemanticToken { spaces.spacePaddingInlineLg }
    /// Has for value token spaces.spaceColumnGapSm
    @objc open var buttonSpaceColumnGapIcon: SpaceSemanticToken { spaces.spaceColumnGapSm }
    /// Has for value token spaces.spaceColumnGapXs
    @objc open var buttonSpaceColumnGapChevron: SpaceSemanticToken { spaces.spaceColumnGapXs }
    /// Has for value token spaces.spaceColumnGap2xs
    @objc open var buttonSpaceColumnGapIconChevron: SpaceSemanticToken { spaces.spaceColumnGap2xs }
    /// Has for value token sizes.sizeIconWithLabelLargeSizeXs
    @objc open var buttonSizeIcon: SizeSemanticToken { sizes.sizeIconWithLabelLargeSizeXs }
    /// Has for value token sizes.sizeIconWithLabelLargeSizeSm
    @objc open var buttonSizeIconOnly: SizeSemanticToken { sizes.sizeIconWithLabelLargeSizeSm }
    /// Has for value token sizes.sizeIconWithLabelLargeSizeXs
    @objc open var buttonSizeLoader: SizeSemanticToken { sizes.sizeIconWithLabelLargeSizeXs }
    /// Has for value token sizes.sizeMinInteractiveArea
    @objc open var buttonSizeMinHeight: SizeSemanticToken { sizes.sizeMinInteractiveArea }
    /// Has for value token sizes.sizeMinInteractiveArea
    @objc open var buttonSizeMinWidth: SizeSemanticToken { sizes.sizeMinInteractiveArea }
    /// Has for value token sizes.sizeMinInteractiveArea
    @objc open var buttonSizeMaxHeightIconOnly: SizeSemanticToken { sizes.sizeMinInteractiveArea }
}

// swiftlint:enable line_length
