//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import Foundation
import OUDSTokensComponent
import OUDSTokensSemantic

// ðŸ§¬ Tokens version: 1.1.0 (Wireframe brand)
// ðŸ¤– Generated by Tokenator

extension WireframeThemeChipComponentTokensProvider: ChipComponentTokens {
    /// Has for value token colors.colorContentOnActionEnabled
    @objc open var chipBadgeColorBg: MultipleColorSemanticTokens { colors.colorContentOnActionEnabled }
    /// Has for value token colors.colorContentDefault
    @objc open var chipBadgeColorContent: MultipleColorSemanticTokens { colors.colorContentDefault }
    /// Has for value token colors.colorActionSelected
    @objc open var chipColorBgSelectedEnabled: MultipleColorSemanticTokens { colors.colorActionSelected }
    /// Has for value token colors.colorActionHover
    @objc open var chipColorBgSelectedHover: MultipleColorSemanticTokens { colors.colorActionHover }
    /// Has for value token colors.colorActionPressed
    @objc open var chipColorBgSelectedPressed: MultipleColorSemanticTokens { colors.colorActionPressed }
    /// Has for value token colors.colorActionDisabled
    @objc open var chipColorBgSelectedDisabled: MultipleColorSemanticTokens { colors.colorActionDisabled }
    /// Has for value token colors.colorActionHover
    @objc open var chipColorBgSelectedFocus: MultipleColorSemanticTokens { colors.colorActionHover }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var chipColorBgUnselectedEnabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var chipColorBgUnselectedHover: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var chipColorBgUnselectedPressed: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var chipColorBgUnselectedDisabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var chipColorBgUnselectedFocus: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorContentOnActionSelected
    @objc open var chipColorContentSelectedTickEnabled: MultipleColorSemanticTokens { colors.colorContentOnActionSelected }
    /// Has for value token colors.colorContentOnActionEnabled
    @objc open var chipColorContentSelectedEnabled: MultipleColorSemanticTokens { colors.colorContentOnActionEnabled }
    /// Has for value token colors.colorContentOnActionHover
    @objc open var chipColorContentSelectedHover: MultipleColorSemanticTokens { colors.colorContentOnActionHover }
    /// Has for value token colors.colorContentOnActionPressed
    @objc open var chipColorContentSelectedPressed: MultipleColorSemanticTokens { colors.colorContentOnActionPressed }
    /// Has for value token colors.colorContentOnActionDisabled
    @objc open var chipColorContentSelectedDisabled: MultipleColorSemanticTokens { colors.colorContentOnActionDisabled }
    /// Has for value token colors.colorContentOnActionFocus
    @objc open var chipColorContentSelectedFocus: MultipleColorSemanticTokens { colors.colorContentOnActionFocus }
    /// Has for value token colors.colorActionEnabled
    @objc open var chipColorContentUnselectedEnabled: MultipleColorSemanticTokens { colors.colorActionEnabled }
    /// Has for value token colors.colorActionHover
    @objc open var chipColorContentUnselectedHover: MultipleColorSemanticTokens { colors.colorActionHover }
    /// Has for value token colors.colorActionPressed
    @objc open var chipColorContentUnselectedPressed: MultipleColorSemanticTokens { colors.colorActionPressed }
    /// Has for value token colors.colorActionDisabled
    @objc open var chipColorContentUnselectedDisabled: MultipleColorSemanticTokens { colors.colorActionDisabled }
    /// Has for value token colors.colorActionFocus
    @objc open var chipColorContentUnselectedFocus: MultipleColorSemanticTokens { colors.colorActionFocus }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var chipColorBorderSelectedEnabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var chipColorBorderSelectedHover: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var chipColorBorderSelectedPressed: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var chipColorBorderSelectedDisabled: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorOpacityTransparent
    @objc open var chipColorBorderSelectedFocus: MultipleColorSemanticTokens { colors.colorOpacityTransparent }
    /// Has for value token colors.colorActionEnabled
    @objc open var chipColorBorderUnselectedEnabled: MultipleColorSemanticTokens { colors.colorActionEnabled }
    /// Has for value token colors.colorActionHover
    @objc open var chipColorBorderUnselectedHover: MultipleColorSemanticTokens { colors.colorActionHover }
    /// Has for value token colors.colorActionPressed
    @objc open var chipColorBorderUnselectedPressed: MultipleColorSemanticTokens { colors.colorActionPressed }
    /// Has for value token colors.colorActionDisabled
    @objc open var chipColorBorderUnselectedDisabled: MultipleColorSemanticTokens { colors.colorActionDisabled }
    /// Has for value token colors.colorActionFocus
    @objc open var chipColorBorderUnselectedFocus: MultipleColorSemanticTokens { colors.colorActionFocus }
    /// Has for value token borders.borderRadiusLarge
    @objc open var chipBorderRadius: BorderRadiusSemanticToken { borders.borderRadiusLarge }
    /// Has for value token borders.borderWidthNone
    @objc open var chipBorderWidthSelected: BorderWidthSemanticToken { borders.borderWidthNone }
    /// Has for value token borders.borderWidthDefault
    @objc open var chipBorderWidthUnselected: BorderWidthSemanticToken { borders.borderWidthDefault }
    /// Has for value token borders.borderWidthMedium
    @objc open var chipBorderWidthUnselectedInteraction: BorderWidthSemanticToken { borders.borderWidthMedium }
    /// Has for value token spaces.spacePaddingBlock2xs
    @objc open var chipSpacePaddingBlock: SpaceSemanticToken { spaces.spacePaddingBlock2xs }
    /// Has for value token spaces.spacePaddingBlockXs
    @objc open var chipSpacePaddingBlockIconOnly: SpaceSemanticToken { spaces.spacePaddingBlockXs }
    /// Has for value token spaces.spacePaddingInlineSm
    @objc open var chipSpacePaddingInlineIcon: SpaceSemanticToken { spaces.spacePaddingInlineSm }
    /// Has for value token spaces.spacePaddingInlineLg
    @objc open var chipSpacePaddingInlineIconNone: SpaceSemanticToken { spaces.spacePaddingInlineLg }
    /// Has for value token spaces.spacePaddingInlineXs
    @objc open var chipSpacePaddingInlineChevronEnd: SpaceSemanticToken { spaces.spacePaddingInlineXs }
    /// Has for value token spaces.spacePaddingInline4xs
    @objc open var chipSpacePaddingInlineBadgeStart: SpaceSemanticToken { spaces.spacePaddingInline4xs }
    /// Has for value token spaces.spaceColumnGapXs
    @objc open var chipSpaceColumnGapIcon: SpaceSemanticToken { spaces.spaceColumnGapXs }
    /// Has for value token spaces.spaceColumnGap2xs
    @objc open var chipSpaceColumnGapBadgeChevron: SpaceSemanticToken { spaces.spaceColumnGap2xs }
    /// Has for value token sizes.sizeIconWithLabelMediumSizeSm
    @objc open var chipSizeIcon: SizeSemanticToken { sizes.sizeIconWithLabelMediumSizeSm }
    /// Has for value token dimensions.dimension2xl
    @objc open var chipSizeMinWidth: SizeSemanticToken { dimensions.dimension2xl }
    /// Has for value token dimensions.dimensionXs
    @objc open var chipSizeMinHeight: SizeSemanticToken { dimensions.dimensionXs }
    /// Has for value token sizes.sizeMinInteractiveArea
    @objc open var chipSizeMinHeightInteractiveArea: SizeSemanticToken { sizes.sizeMinInteractiveArea }
}
