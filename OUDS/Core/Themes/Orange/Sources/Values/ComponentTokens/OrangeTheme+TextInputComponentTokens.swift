//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import Foundation
import OUDSTokensComponent
import OUDSTokensSemantic

// ðŸ§± Tokens version: 1.1.0 (Orange brand)
// ðŸ¤– Generated by Tokenator

extension OrangeThemeTextInputComponentTokensProvider: TextInputComponentTokens {
    /// Has for value token colors.colorBorderDefault
    @objc open var textInputColorBorderEnabled: MultipleColorSemanticTokens { colors.colorBorderDefault }
    /// Has for value token colors.colorActionHover
    @objc open var textInputColorBorderHover: MultipleColorSemanticTokens { colors.colorActionHover }
    /// Has for value token colors.colorBorderEmphasized
    @objc open var textInputColorBorderFocus: MultipleColorSemanticTokens { colors.colorBorderEmphasized }
    /// Has for value token colors.colorBorderEmphasized
    @objc open var textInputColorBorderLoading: MultipleColorSemanticTokens { colors.colorBorderEmphasized }
    /// Has for value token borders.borderRadiusDefault
    @objc open var textInputBorderRadius: BorderRadiusSemanticToken { borders.borderRadiusDefault }
    /// Has for value token borders.borderWidthDefault
    @objc open var textInputBorderWidthDefault: BorderWidthSemanticToken { borders.borderWidthDefault }
    /// Has for value token borders.borderWidthMedium
    @objc open var textInputBorderWidthFocus: BorderWidthSemanticToken { borders.borderWidthMedium }
    /// Has for value token spaces.spacePaddingInlineLg
    @objc open var textInputSpacePaddingInlineDefault: SpaceSemanticToken { spaces.spacePaddingInlineLg }
    /// Has for value token spaces.spacePaddingInline2xs
    @objc open var textInputSpacePaddingInlineButton: SpaceSemanticToken { spaces.spacePaddingInline2xs }
    /// Has for value token spaces.spacePaddingInlineSm
    @objc open var textInputSpacePaddingInlineCountrySelectorStart: SpaceSemanticToken { spaces.spacePaddingInlineSm }
    /// Has for value token spaces.spacePaddingInlineXs
    @objc open var textInputSpacePaddingInlineCountrySelectorEnd: SpaceSemanticToken { spaces.spacePaddingInlineXs }
    /// Has for value token spaces.spacePaddingBlock2xs
    @objc open var textInputSpacePaddingBlockDefault: SpaceSemanticToken { spaces.spacePaddingBlock2xs }
    /// Has for value token spaces.spacePaddingBlockXs
    @objc open var textInputSpacePaddingBlockTopHelperText: SpaceSemanticToken { spaces.spacePaddingBlockXs }
    /// Has for value token spaces.spaceColumnGapMd
    @objc open var textInputSpaceColumnGapDefault: SpaceSemanticToken { spaces.spaceColumnGapMd }
    /// Has for value token spaces.spaceColumnGapXs
    @objc open var textInputSpaceColumnGapInlineText: SpaceSemanticToken { spaces.spaceColumnGapXs }
    /// Has for value token spaces.spaceColumnGapXs
    @objc open var textInputSpaceColumnGapTrailingErrorIcon: SpaceSemanticToken { spaces.spaceColumnGapXs }
    /// Has for value token spaces.spaceRowGapNone
    @objc open var textInputSpaceRowGapLabelInput: SpaceSemanticToken { spaces.spaceRowGapNone }
    /// Has for value token sizes.sizeIconWithLabelLargeSizeSm
    @objc open var textInputSizeLeadingIcon: SizeSemanticToken { sizes.sizeIconWithLabelLargeSizeSm }
    /// Has for value token sizes.sizeIconWithLabelLargeSizeSm
    @objc open var textInputSizeCreditCardHeight: SizeSemanticToken { sizes.sizeIconWithLabelLargeSizeSm }
    /// Has for value token sizes.sizeIconWithLabelLargeSizeXs
    @objc open var textInputSizeCountrySelectorChevron: SizeSemanticToken { sizes.sizeIconWithLabelLargeSizeXs }
    /// Has for value token sizes.sizeIconWithLabelLargeSizeXs
    @objc open var textInputSizeCountrySelectorFlagHeight: SizeSemanticToken { sizes.sizeIconWithLabelLargeSizeXs }
    /// Has for value token dimensions.dimension4xs
    @objc open var textInputSizeVerticalDividerHeight: SizeSemanticToken { dimensions.dimension4xs }
    /// Has for value token DimensionRawTokens.dimension600
    @objc open var textInputSizeLabelMaxHeight: SizeSemanticToken { DimensionRawTokens.dimension600 }
    /// Has for value token DimensionRawTokens.dimension750
    @objc open var textInputSizeMinHeight: SizeSemanticToken { DimensionRawTokens.dimension750 }
    /// Has for value token DimensionRawTokens.dimension2500
    @objc open var textInputSizeMinWidth: SizeSemanticToken { DimensionRawTokens.dimension2500 }
    /// Has for value token DimensionRawTokens.dimension4000
    @objc open var textInputSizeMaxWidth: SizeSemanticToken { DimensionRawTokens.dimension4000 }
}
