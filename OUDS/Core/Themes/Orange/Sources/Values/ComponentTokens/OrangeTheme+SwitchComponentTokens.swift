//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import Foundation
import OUDSTokensComponent
import OUDSTokensRaw
import OUDSTokensSemantic

// ðŸ§± Tokens version: 0.11.0
// ðŸ¤– Generated by Tokenator

// swiftlint:disable line_length

extension OrangeThemeSwitchComponentTokensProvider: SwitchComponentTokens {
    /// Has for value token borders.borderRadiusPill
    @objc open var switchBorderRadius: BorderRadiusSemanticToken { borders.borderRadiusPill }
    /// Has for value colors.colorContentDefault
    @objc open var switchColorCheck: MultipleColorSemanticTokens { colors.colorContentDefault }
    /// Has for value MultipleColorSemanticTokens(colors.colorRepositoryNeutralMutedWhite)
    @objc open var switchColorCursor: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colors.colorRepositoryNeutralMutedWhite) }
    /// Has for value MultipleColorSemanticTokens(colors.colorRepositoryPositiveDefault)
    @objc open var switchColorTrackSelected: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colors.colorRepositoryPositiveDefault) }
    /// Has for value MultipleColorSemanticTokens(colors.colorRepositoryPositiveHigh)
    @objc open var switchColorTrackSelectedInteraction: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colors.colorRepositoryPositiveHigh) }
    /// Has for value MultipleColorSemanticTokens(colors.colorRepositoryOpacityBlackMediumHigh)
    @objc open var switchColorTrackUnselected: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colors.colorRepositoryOpacityBlackMediumHigh) }
    /// Has for value MultipleColorSemanticTokens(colors.colorRepositoryOpacityBlackHigh
    @objc open var switchColorTrackUnselectedInteraction: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colors.colorRepositoryOpacityBlackHigh) }
    /// Has for value token opacities.opacityOpaque
    @objc open var switchOpacityCheck: OpacitySemanticToken { opacities.opacityOpaque }
    /// Has for value token DimensionRawTokens.dimension300
    @objc open var switchSizeHeightCursorSelected: SizeSemanticToken { DimensionRawTokens.dimension300 }
    /// Has for value token DimensionRawTokens.dimension200
    @objc open var switchSizeHeightCursorUnselected: SizeSemanticToken { DimensionRawTokens.dimension200 }
    /// Has for value token DimensionRawTokens.dimension400
    @objc open var switchSizeHeightTrack: SizeSemanticToken { DimensionRawTokens.dimension400 }
    /// Has for value token DimensionRawTokens.dimension400
    @objc open var switchSizeMaxHeight: SizeSemanticToken { DimensionRawTokens.dimension400 }
    /// Has for value token DimensionRawTokens.dimension400
    @objc open var switchSizeMinHeight: SizeSemanticToken { DimensionRawTokens.dimension400 }
    /// Has for value token DimensionRawTokens.dimension700
    @objc open var switchSizeMinWidth: SizeSemanticToken { DimensionRawTokens.dimension700 }
    /// Has for value token DimensionRawTokens.dimension300
    @objc open var switchSizeWidthCursorSelected: SizeSemanticToken { DimensionRawTokens.dimension300 }
    /// Has for value token DimensionRawTokens.dimension400
    @objc open var switchSizeWidthCursorSelectedPressed: SizeSemanticToken { DimensionRawTokens.dimension400 }
    /// Has for value token DimensionRawTokens.dimension200
    @objc open var switchSizeWidthCursorUnselected: SizeSemanticToken { DimensionRawTokens.dimension200 }
    /// Has for value token DimensionRawTokens.dimension300
    @objc open var switchSizeWidthCursorUnselectedPressed: SizeSemanticToken { DimensionRawTokens.dimension300 }
    /// Has for value token DimensionRawTokens.dimension700
    @objc open var switchSizeWidthTrack: SizeSemanticToken { DimensionRawTokens.dimension700 }
    /// Has for value token spaces.spacePaddingInline2xs
    @objc open var switchSpacePaddingInlineSelected: SpaceSemanticToken { spaces.spacePaddingInline2xs }
    /// Has for value token spaces.spacePaddingInlineSm
    @objc open var switchSpacePaddingInlineUnselected: SpaceSemanticToken { spaces.spacePaddingInlineSm }
}

// swiftlint:enable line_length
