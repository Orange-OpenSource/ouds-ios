//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
// 
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
// 
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System 
//

import OUDSFoundations
import OUDSThemesOrange
import OUDSTokensRaw
import OUDSTokensSemantic

// [File not generated by the tokenator]
// WARNING: Not synchronized anymore with the Figjam / Figma by developers team
// Create an issue for update https://github.com/Orange-OpenSource/ouds-ios/issues/new?template=token_update.yml

/// Overrides some colors using  semantic tokens of `ColorSemanticTokens`.
/// Some tokens do not have values assigned in the design system, and must be overriden.
/// Ensures the colors are always the "dark mode" colors.
/// In few words, uses the tokens which are all defined in ``OrangeThemeColorSemanticTokensWrapper`` and overrides them.
final class InverseThemeColorSemanticTokensWrapper: OrangeThemeColorSemanticTokensWrapper {

    // MARK: - Init

    override init() {
        OUDSLogger.debug("Init of InverseThemeColorSemanticTokensWrapper")
    }

    deinit { }

    // MARK: - Overrides

    // MARK: - Color - Opacity - Invisible

    override public var colorOpacityInvisibleBlack: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorOpacityInvisibleBlackDark) }

    override public var colorOpacityInvisibleWhite: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorOpacityInvisibleWhiteDark) }

    // MARK: - Color - Action

    override public var colorActionDisabled: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionDisabledDark) }

    override public var colorActionEnabled: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionEnabledDark) }

    override public var colorActionFocus: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionFocusDark) }

    override public var colorActionHighlighted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionHighlightedDark) }

    override public var colorActionHover: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionHoverDark) }

    override public var colorActionLoading: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionLoadingDark) }

    override public var colorActionNegativeEnabled: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionNegativeEnabledDark) }

    override public var colorActionNegativeFocus: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionNegativeFocusDark) }

    override public var colorActionNegativeHover: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionNegativeHoverDark) }

    override public var colorActionNegativeLoading: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionNegativeLoadingDark) }

    override public var colorActionNegativePressed: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionNegativePressedDark) }

    override public var colorActionPressed: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionPressedDark) }

    override public var colorActionSelected: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionSelectedDark) }

    override public var colorActionSupportEnabled: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionSupportEnabledDark) }

    override public var colorActionSupportFocus: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionSupportFocusDark) }

    override public var colorActionSupportHover: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionSupportHoverDark) }

    override public var colorActionSupportLoading: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionSupportLoadingDark) }

    override public var colorActionSupportPressed: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionSupportPressedDark) }

    override public var colorActionVisited: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorActionVisitedDark) }

    // MARK: - Color - Always

    override public var colorAlwaysBlack: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorAlwaysBlackDark) }

    override public var colorAlwaysOnBlack: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorAlwaysOnBlackDark) }

    override public var colorAlwaysOnWhite: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorAlwaysOnWhiteDark) }

    override public var colorAlwaysWhite: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorAlwaysWhiteDark) }

    // MARK: - Color - Background

    override public var colorBgEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorBgEmphasizedDark) }

    override public var colorBgPrimary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorBgPrimaryDark) }

    override public var colorBgSecondary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorBgSecondaryDark) }

    override public var colorBgTertiary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorBgTertiaryDark) }

    // MARK: - Color - Border

    override public var colorBorderBrandPrimary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorBorderBrandPrimaryDark) }

    override public var colorBorderDefault: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorBorderDefaultDark) }

    override public var colorBorderEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorBorderEmphasizedDark) }

    override public var colorBorderFocus: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorBorderFocusDark) }

    override public var colorBorderFocusInset: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorBorderFocusInsetDark) }

    override public var colorBorderOnBrandPrimary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorBorderOnBrandPrimaryDark) }

    // MARK: - Color - Content

    override public var colorContentBrandPrimary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentBrandPrimaryDark) }

    override public var colorContentDefault: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentDefaultDark) }

    override public var colorContentDisabled: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentDisabledDark) }

    override public var colorContentMuted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentMutedDark) }

    override public var colorContentOnActionDisabled: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnActionDisabledDark) }

    override public var colorContentOnActionEnabled: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnActionEnabledDark) }

    override public var colorContentOnActionFocus: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnActionFocusDark) }

    override public var colorContentOnActionHighlighted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnActionHighlightedDark) }

    override public var colorContentOnActionHover: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnActionHoverDark) }

    override public var colorContentOnActionLoading: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnActionLoadingDark) }

    override public var colorContentOnActionNegative: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnActionNegativeDark) }

    override public var colorContentOnActionPressed: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnActionPressedDark) }

    override public var colorContentOnBrandPrimary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnBrandPrimaryDark) }

    override public var colorContentOnOverlayEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnOverlayEmphasizedDark) }

    override public var colorContentOnStatusEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnStatusEmphasizedDark) }

    override public var colorContentOnStatusEmphasizedNeutral: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnStatusEmphasizedNeutralDark) }

    override public var colorContentOnStatusMuted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentOnStatusMutedDark) }

    override public var colorContentStatusInfo: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentStatusInfoDark) }

    override public var colorContentStatusNegative: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentStatusNegativeDark) }

    override public var colorContentStatusPositive: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentStatusPositiveDark) }

    override public var colorContentStatusWarning: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorContentStatusWarningDark) }

    // MARK: - Color - Overlay

    override public var colorOverlayDefault: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorOverlayDefaultDark) }

    override public var colorOverlayDrag: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorOverlayDragDark) }

    override public var colorOverlayEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorOverlayEmphasizedDark) }

    override public var colorOverlayModal: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorOverlayModalDark) }

    // MARK: - Color - Surface

    override public var colorSurfaceBrandPrimary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceBrandPrimaryDark) }

    override public var colorSurfaceStatusAccentEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusAccentEmphasizedDark) }

    override public var colorSurfaceStatusAccentMuted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusAccentMutedDark) }

    override public var colorSurfaceStatusInfoEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusInfoEmphasizedDark) }

    override public var colorSurfaceStatusInfoMuted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusInfoMutedDark) }

    override public var colorSurfaceStatusNegativeEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusNegativeEmphasizedDark) }

    override public var colorSurfaceStatusNegativeMuted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusNegativeMutedDark) }

    override public var colorSurfaceStatusNeutralEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusNeutralEmphasizedDark) }

    override public var colorSurfaceStatusNeutralMuted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusNeutralMutedDark) }

    override public var colorSurfaceStatusPositiveEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusPositiveEmphasizedDark) }

    override public var colorSurfaceStatusPositiveMuted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusPositiveMutedDark) }

    override public var colorSurfaceStatusWarningEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusWarningEmphasizedDark) }

    override public var colorSurfaceStatusWarningMuted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorSurfaceStatusWarningMutedDark) }

    // MARK: - Color - Decorative

    override public var colorDecorativeAccent1Default: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent1DefaultDark) }

    override public var colorDecorativeAccent1Emphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent1EmphasizedDark) }

    override public var colorDecorativeAccent1Muted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent1MutedDark) }

    override public var colorDecorativeAccent2Default: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent2DefaultDark) }

    override public var colorDecorativeAccent2Emphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent2EmphasizedDark) }

    override public var colorDecorativeAccent2Muted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent2MutedDark) }

    override public var colorDecorativeAccent3Default: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent3DefaultDark) }

    override public var colorDecorativeAccent3Emphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent3EmphasizedDark) }

    override public var colorDecorativeAccent3Muted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent3MutedDark) }

    override public var colorDecorativeAccent4Default: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent4DefaultDark) }

    override public var colorDecorativeAccent4Emphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent4EmphasizedDark) }

    override public var colorDecorativeAccent4Muted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent4MutedDark) }

    override public var colorDecorativeAccent5Default: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent5DefaultDark) }

    override public var colorDecorativeAccent5Emphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent5EmphasizedDark) }

    override public var colorDecorativeAccent5Muted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeAccent5MutedDark) }

    override public var colorDecorativeBrandPrimary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeBrandPrimaryDark) }

    override public var colorDecorativeBrandSecondary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeBrandSecondaryDark) }

    override public var colorDecorativeBrandTertiary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeBrandTertiaryDark) }

    override public var colorDecorativeNeutralDefault: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeNeutralDefaultDark) }

    override public var colorDecorativeNeutralEmphasized: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeNeutralEmphasizedDark) }

    override public var colorDecorativeNeutralMuted: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeNeutralMutedDark) }

    override public var colorDecorativeSkinTint100: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeSkinTint100Dark) }

    override public var colorDecorativeSkinTint200: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeSkinTint200Dark) }

    override public var colorDecorativeSkinTint300: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeSkinTint300Dark) }

    override public var colorDecorativeSkinTint400: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeSkinTint400Dark) }

    override public var colorDecorativeSkinTint500: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeSkinTint500Dark) }

    override public var colorDecorativeSkinTint600: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeSkinTint600Dark) }

    override public var colorDecorativeSkinTint700: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeSkinTint700Dark) }

    override public var colorDecorativeSkinTint800: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeSkinTint800Dark) }

    override public var colorDecorativeSkinTint900: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorDecorativeSkinTint900Dark) }

    // MARK: - Color - Chart

    override public var colorChartCategoricalTier1: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartCategoricalTier1Dark) }

    override public var colorChartCategoricalTier2: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartCategoricalTier2Dark) }

    override public var colorChartCategoricalTier3: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartCategoricalTier3Dark) }

    override public var colorChartCategoricalTier4: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartCategoricalTier4Dark) }

    override public var colorChartCategoricalTier5: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartCategoricalTier5Dark) }

    override public var colorChartCategoricalTier6: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartCategoricalTier6Dark) }

    override public var colorChartCategoricalTier7: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartCategoricalTier7Dark) }

    override public var colorChartCategoricalTier8: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartCategoricalTier8Dark) }

    override public var colorChartCategoricalTier9: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartCategoricalTier9Dark) }

    override public var colorChartCategoricalTier10: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartCategoricalTier10Dark) }

    override public var colorChartFunctionalInformation: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartFunctionalInformationDark) }

    override public var colorChartFunctionalNegative: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartFunctionalNegativeDark) }

    override public var colorChartFunctionalPositive: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartFunctionalPositiveDark) }

    override public var colorChartFunctionalWarning: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartFunctionalWarningDark) }

    override public var colorChartGridlines: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartGridlinesDark) }

    override public var colorChartHighlight: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartHighlightDark) }

    override public var colorChartNeutral: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorChartNeutralDark) }

    // MARK: - Color - Repository

    override public var colorRepositoryAccentDefault: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryAccentDefaultDark) }

    override public var colorRepositoryAccentHighest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryAccentHighestDark) }

    override public var colorRepositoryAccentLow: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryAccentLowDark) }

    override public var colorRepositoryAccentLowest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryAccentLowestDark) }

    override public var colorRepositoryInfoDefault: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryInfoDefaultDark) }

    override public var colorRepositoryInfoHighest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryInfoHighestDark) }

    override public var colorRepositoryInfoLow: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryInfoLowDark) }

    override public var colorRepositoryInfoLowest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryInfoLowestDark) }

    override public var colorRepositoryNegativeDefault: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNegativeDefaultDark) }

    override public var colorRepositoryNegativeHigh: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNegativeHighDark) }

    override public var colorRepositoryNegativeHigher: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNegativeHigherDark) }

    override public var colorRepositoryNegativeHighest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNegativeHighestDark) }

    override public var colorRepositoryNegativeLow: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNegativeLowDark) }

    override public var colorRepositoryNegativeLower: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNegativeLowerDark) }

    override public var colorRepositoryNegativeLowest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNegativeLowestDark) }

    override public var colorRepositoryNeutralEmphasizedBlack: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNeutralEmphasizedBlackDark) }

    override public var colorRepositoryNeutralEmphasizedHigh: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNeutralEmphasizedHighDark) }

    override public var colorRepositoryNeutralEmphasizedHigher: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNeutralEmphasizedHigherDark) }

    override public var colorRepositoryNeutralEmphasizedHighest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNeutralEmphasizedHighestDark) }

    override public var colorRepositoryNeutralEmphasizedMedium: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNeutralEmphasizedMediumDark) }

    override public var colorRepositoryNeutralMutedLower: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNeutralMutedLowerDark) }

    override public var colorRepositoryNeutralMutedLowest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNeutralMutedLowestDark) }

    override public var colorRepositoryNeutralMutedWhite: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryNeutralMutedWhiteDark) }

    override public var colorRepositoryOpacityBlackHigher: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityBlackHigherDark) }

    override public var colorRepositoryOpacityBlackHighest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityBlackHighestDark) }

    override public var colorRepositoryOpacityBlackLow: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityBlackLowDark) }

    override public var colorRepositoryOpacityBlackLower: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityBlackLowerDark) }

    override public var colorRepositoryOpacityBlackLowest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityBlackLowestDark) }

    override public var colorRepositoryOpacityBlackMedium: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityBlackMediumDark) }

    override public var colorRepositoryOpacityBlackTransparent: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityBlackTransparentDark) }

    override public var colorRepositoryOpacityInfo: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityInfoDark) }

    override public var colorRepositoryOpacityNegative: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityNegativeDark) }

    override public var colorRepositoryOpacityPositive: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityPositiveDark) }

    override public var colorRepositoryOpacityWarning: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityWarningDark) }

    override public var colorRepositoryOpacityWhiteHigh: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityWhiteHighDark) }

    override public var colorRepositoryOpacityWhiteHigher: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityWhiteHigherDark) }

    override public var colorRepositoryOpacityWhiteHighest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityWhiteHighestDark) }

    override public var colorRepositoryOpacityWhiteLow: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityWhiteLowDark) }

    override public var colorRepositoryOpacityWhiteLower: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityWhiteLowerDark) }

    override public var colorRepositoryOpacityWhiteLowest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityWhiteLowestDark) }

    override public var colorRepositoryOpacityWhiteTransparent: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryOpacityWhiteTransparentDark) }

    override public var colorRepositoryPositiveDefault: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryPositiveDefaultDark) }

    override public var colorRepositoryPositiveHighest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryPositiveHighestDark) }

    override public var colorRepositoryPositiveLow: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryPositiveLowDark) }

    override public var colorRepositoryPositiveLowest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryPositiveLowestDark) }

    override public var colorRepositoryPrimaryDefault: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryPrimaryDefaultDark) }

    override public var colorRepositoryPrimaryLow: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryPrimaryLowDark) }

    override public var colorRepositoryWarningDefault: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryWarningDefaultDark) }

    override public var colorRepositoryWarningHighest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryWarningHighestDark) }

    override public var colorRepositoryWarningLow: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryWarningLowDark) }

    override public var colorRepositoryWarningLowest: MultipleColorSemanticTokens { MultipleColorSemanticTokens(colorRepositoryWarningLowestDark) }
}
