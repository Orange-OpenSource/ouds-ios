//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
// 
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
// 
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System 
//

import SwiftUI

/// Defined as the group of all **raw tokens** related to **colors mode**.
/// Values are defined in *ColorModeRawTokens+Values.swift* file and not generated by the tokenator, as frozen values.
/// ``ColorModeRawTokens`` are tokens to use to define *color mode* of components, i.e. if a comonent or something must be considered
/// in light or dark color scheme, or in monochrome mode.
///
/// Primitive types such as  `String` must be used to as to allow to use `@objc` keywords in extensions for overriding.
/// Such tokens are packed in a _Swift enum_ so as to gather them in one object with the suitable namespace and avoid to have just constants in nothing else
///  (i.e. publicly accessible from everywhere). More optimized than _struct_.
///
/// - Since: 0.13.0
public enum ColorModeRawTokens {

    /// Depending to the given value, defines the color scheme to consider
    /// - Parameter mode: A color mode to test
    /// - Return: The color scheme to apply or nil ig not possible to defined
    public static func colorScheme(for mode: ColorModeRawToken) -> ColorScheme? {
        if mode == ColorModeRawTokens.light || mode == ColorModeRawTokens.monochromeLight {
            return .light
        }
        if mode == ColorModeRawTokens.dark || mode == ColorModeRawTokens.monochromeDark {
            return .dark
        }
        return nil
    }

    // swiftlint:disable discouraged_optional_boolean
    /// Depending to the given value, defines if the monochrome mode must be considered or not
    /// - Parameter mode: A color mode to test
    /// - Return: `true` if monochrome must be applied, `false` otherwise, `nil` if not possible to define
    public static func isMonochrome(mode: ColorModeRawToken) -> Bool? {
        if mode == ColorModeRawTokens.monochromeLight || mode == ColorModeRawTokens.monochromeDark {
            return true
        }
        if mode == ColorModeRawTokens.light || mode == ColorModeRawTokens.dark {
            return false
        }
        return nil
    }
    // swiftlint:enable discouraged_optional_boolean

    // ଘ( ･ω･)_/ﾟ･:*:･｡☆
    // Note: For consistancy reasons, even if the code is not generated by tokentaors,
    // the values have been added in the Values folder
}
