//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
// 
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
// 
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System 
//

/// Defined as the group of all **raw tokens** related to **colors**.
/// Values are defined in *ColorRawTokens+Values.swift* file and generated by the tokenator.
/// ``ColorRawTokens`` are tokens to use to define *colors* of components thants to ``ColorRawToken`` type. Some of these colors are "raw", and others have transparancy effects.
/// This enum contains also the shared colors, i.e. colors exposed to any theme. Some colors related to the Orange brand are defined elswhere in `OrangeBrandColorRawTokens`.
///
/// Primitive types such as  ``String` must be used to as to allow to use `@objc` keywords in extensions for overriding.
/// Such tokens are packed in a _Swift enum_ so as to gather them in one object with the suitable namespace and avoid to have just constants in nothing else
///  (i.e. publicly accessible from everywhere). More optimized than _struct_.
public enum ColorRawTokens {

    // ଘ( ･ω･)_/ﾟ･:*:･｡☆
    // Note: So as to help the tokenator, the values have been added in the Values folder
    // This trick helps also to write documentation for these tokens as the tokenator cannot generate documentation

    /// Applies to a color in its hexadecimal representation the given `opacity`
    /// - Parameters:
    ///    - opacity: The opacity effect to apply
    ///    - hexColor: The String color to update
    /// - Returns: The new color, as a `String`, update with the given `OpacityRawToken` value
    static func apply(opacity: OpacityRawToken, on hexColor: String) -> String {
        // TODO: Improve this algorithm too much naive
        // Values picked from https://gist.github.com/lopspower/03fb1cc0ac9f32ef38f4
        if opacity == OpacityRawTokens.opacity0 {
            return hexColor + "00"
        }
        if opacity == OpacityRawTokens.opacity100 {
            return hexColor + "0A"
        }
        if opacity == OpacityRawTokens.opacity200 {
            return hexColor + "14"
        }
        if opacity == OpacityRawTokens.opacity300 {
            return hexColor + "29"
        }
        if opacity == OpacityRawTokens.opacity400 {
            return hexColor + "3D"
        }
        if opacity == OpacityRawTokens.opacity500 {
            return hexColor + "52"
        }
        if opacity == OpacityRawTokens.opacity600 {
            return hexColor + "7A"
        }
        if opacity == OpacityRawTokens.opacity700 {
            return hexColor + "A3"
        }
        if opacity == OpacityRawTokens.opacity800 {
            return hexColor + "E0"
        }
        if opacity == OpacityRawTokens.opacity900 {
            return hexColor + "FF"
        }
        return hexColor
    }
}
