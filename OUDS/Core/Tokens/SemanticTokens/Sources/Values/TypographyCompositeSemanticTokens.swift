//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

// [File not generated by the tokenator]
// WARNING: Not synchronized anymore with the Figjam / Figma by developers team
// Create an issue for update https://github.com/Orange-OpenSource/ouds-ios/issues/new?template=token_update.yml

// swiftlint:disable missing_docs

/// This is a group of semantic tokens for **typography**, but only **composite tokens** in the end.
/// There are splitted and not declared in ``TypographySemanticTokens`` as the *tokenator* tool parsing *Figma* JSON to Swift code is not able to manage them.
/// Thus we need to declare them in another file to prevent them to be erased.
///
/// It defines all composite typography semantic tokens a theme must have, i.e. tokens including properties for font family, font weight, font size or line height for example.
///
/// This protocol makes themes able to provide and override `TypographyCompositeRawToken` gathered in ``MultipleTypographyCompositeRawTokens`` instances.
/// This `TypographyCompositeRawToken` is not managed by tokenator yet as it is composed by several properties.
public protocol TypographyCompositeSemanticTokens {

    // MARK: - Semantic tokens - Typography - Composites - Display

    var typeDisplayLarge: MultipleTypographyCompositeRawTokens { get }
    var typeDisplayMedium: MultipleTypographyCompositeRawTokens { get }
    var typeDisplaySmall: MultipleTypographyCompositeRawTokens { get }

    // MARK: - Semantic tokens - Typography - Composites - Heading

    var typeHeadingXLarge: MultipleTypographyCompositeRawTokens { get }
    var typeHeadingLarge: MultipleTypographyCompositeRawTokens { get }
    var typeHeadingMedium: MultipleTypographyCompositeRawTokens { get }
    var typeHeadingSmall: MultipleTypographyCompositeRawTokens { get }

    // MARK: - Semantic tokens - Typography - Composites - Body

    var typeBodyDefaultLarge: MultipleTypographyCompositeRawTokens { get }
    var typeBodyDefaultMedium: MultipleTypographyCompositeRawTokens { get }
    var typeBodyDefaultSmall: MultipleTypographyCompositeRawTokens { get }
    var typeBodyStrongLarge: MultipleTypographyCompositeRawTokens { get }
    var typeBodyStrongMedium: MultipleTypographyCompositeRawTokens { get }
    var typeBodyStrongSmall: MultipleTypographyCompositeRawTokens { get }

    // MARK: - Semantic tokens - Typography - Composites - Label

    var typeLabelDefaultXLarge: MultipleTypographyCompositeRawTokens { get }
    var typeLabelDefaultLarge: MultipleTypographyCompositeRawTokens { get }
    var typeLabelDefaultMedium: MultipleTypographyCompositeRawTokens { get }
    var typeLabelDefaultSmall: MultipleTypographyCompositeRawTokens { get }
    var typeLabelStrongXLarge: MultipleTypographyCompositeRawTokens { get }
    var typeLabelStrongLarge: MultipleTypographyCompositeRawTokens { get }
    var typeLabelStrongMedium: MultipleTypographyCompositeRawTokens { get }
    var typeLabelStrongSmall: MultipleTypographyCompositeRawTokens { get }

    // MARK: - Semantic tokens - Typography - Composites - Code

    var typeCodeMedium: MultipleTypographyCompositeRawTokens { get }
    var typeCodeSmall: MultipleTypographyCompositeRawTokens { get }
}

// swiftlint:enable missing_docs
