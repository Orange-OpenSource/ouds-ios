//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
// 
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
// 
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System 
//

// ଘ( ･ω･)_/ﾟ･:*:･｡☆
// [File to generate with the tokenator]
// WARNING: Not synchronized anymore with the Figjam / Figma by developers team
// Create an issue for update https://github.com/Orange-OpenSource/ouds-ios/issues/new?template=token_update.yml

// swiftlint:disable missing_docs
// swiftlint:disable identifier_name
// swiftlint:disable file_length

/// This is a group of semantic tokens for **colors**.
/// It defines all `ColorSemanticToken` and `ColorAliasSemanticToken` a theme must have.
/// Because `ColorSemanticToken` can be based on `ColorAliasSemanticToken` which are optional, the instanciation of such values can result to `nil`, 
/// so semantic tokens are optional today.
///
/// In the future this file should be generated by a parser converting Figma JSON to Swift code.
public protocol ColorSemanticTokens {

    // MARK: Semantic token - Colors - Background

    var colorBgPrimary: ColorSemanticToken { get }

    var colorBgSecondary: ColorSemanticToken { get }

    var colorBgTertiary: ColorSemanticToken { get }

    var colorBgEmphasized: ColorSemanticToken { get }

    var colorBgBrandPrimary: ColorSemanticToken { get }

    var colorBgBrandSecondary: ColorSemanticToken { get }

    var colorBgBrandTertiary: ColorSemanticToken { get }

    var colorBgStatusNeutral: ColorSemanticToken { get }

    var colorBgStatusNeutralOnBgEmphasized: ColorSemanticToken { get }

    var colorBgStatusPositiveMuted: ColorSemanticToken { get }

    var colorBgStatusPositiveMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorBgStatusPositiveEmphasized: ColorSemanticToken { get }

    var colorBgStatusInfoMuted: ColorSemanticToken { get }

    var colorBgStatusInfoMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorBgStatusInfoEmphasized: ColorSemanticToken { get }

    var colorBgStatusWarningMuted: ColorSemanticToken { get }

    var colorBgStatusWarningMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorBgStatusWarningEmphasized: ColorSemanticToken { get }

    var colorBgStatusNegativeMuted: ColorSemanticToken { get }

    var colorBgStatusNegativeMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorBgStatusNegativeEmphasized: ColorSemanticToken { get }

    var colorBgStatusAccentMuted: ColorSemanticToken { get }

    var colorBgStatusAccentMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorBgStatusAccentEmphasized: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Content - Status

    var colorContentDefault: ColorSemanticToken { get }

    var colorContentContentDefaultOnBgEmphasized: ColorSemanticToken { get }

    var colorContentMuted: ColorSemanticToken { get }

    var colorContentContentMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorContentDisabled: ColorSemanticToken { get }

    var colorContentContentDisabledOnBgEmphasized: ColorSemanticToken { get }

    var colorContentBrandPrimary: ColorSemanticToken { get }

    var colorContentBrandSecondary: ColorSemanticToken { get }

    var colorContentBrandTertiary: ColorSemanticToken { get }

    var colorContentStatusPositive: ColorSemanticToken { get }

    var colorContentStatusInfo: ColorSemanticToken { get }

    var colorContentStatusWarning: ColorSemanticToken { get }

    var colorContentStatusNegative: ColorSemanticToken { get }

    var colorContentStatusAccent: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Content - On Background

    var colorContentOnBgPrimary: ColorSemanticToken { get }

    var colorContentOnBgSecondary: ColorSemanticToken { get }

    var colorContentOnBgTertiary: ColorSemanticToken { get }

    var colorContentOnBgStatusPositiveMuted: ColorSemanticToken { get }

    var colorContentOnBgStatusPositiveMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorContentOnBgStatusPositiveEmphasized: ColorSemanticToken { get }

    var colorContentOnBgStatusInfoMuted: ColorSemanticToken { get }

    var colorContentOnBgStatusInfoMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorContentOnBgStatusInfoEmphasized: ColorSemanticToken { get }

    var colorContentOnBgStatusWarningMuted: ColorSemanticToken { get }

    var colorContentOnBgStatusWarningMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorContentOnBgStatusWarningEmphasized: ColorSemanticToken { get }

    var colorContentOnBgStatusNegativeMuted: ColorSemanticToken { get }

    var colorContentOnBgStatusNegativeMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorContentOnBgStatusNegativeEmphasized: ColorSemanticToken { get }

    var colorContentOnBgStatusAccentMuted: ColorSemanticToken { get }

    var colorContentOnBgStatusAccentMutedOnBgEmphasized: ColorSemanticToken { get }

    var colorContentOnBgStatusAccentedEmphasized: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Border

    var colorBorderDefault: ColorSemanticToken { get }

    var colorBorderDefaultOnBgEmphasized: ColorSemanticToken { get }

    var colorBorderEmphasized: ColorSemanticToken { get }

    var colorBorderEmphasizedOnBgEmphasized: ColorSemanticToken { get }

    var colorBorderFocus: ColorSemanticToken { get }

    var colorBorderBrandPrimaryOnBgEmphasized: ColorSemanticToken { get }

    var colorBorderBrandPrimary: ColorSemanticToken { get }

    var colorBorderBrandSecondary: ColorSemanticToken { get }

    var colorBorderBrandTertiary: ColorSemanticToken { get }

    var colorBorderStatusPositive: ColorSemanticToken { get }

    var colorBorderStatusInfo: ColorSemanticToken { get }

    var colorBorderStatusWarning: ColorSemanticToken { get }

    var colorBorderStatusNegative: ColorSemanticToken { get }

    var colorBorderStatusAccent: ColorSemanticToken { get }

    var colorBorderOnBgBrandPrimary: ColorSemanticToken { get }

    var colorBorderOnBgBrandSecondary: ColorSemanticToken { get }

    var colorBorderOnBgBrandTertiary: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Action

    var colorActionSelected: ColorSemanticToken { get }

    var colorActionSelectedOnBgEmphasized: ColorSemanticToken { get }

    var colorActionDisabled: ColorSemanticToken { get }

    var colorActionDisabledOnBgEmphasized: ColorSemanticToken { get }

    var colorActionVisited: ColorSemanticToken { get }

    var colorActionVistedOnBgEmphasized: ColorSemanticToken { get }

    var colorActionPrimaryEnabled: ColorSemanticToken { get }

    var colorActionPrimaryEnabledOnBgEmphasized: ColorSemanticToken { get }

    var colorActionPrimaryHover: ColorSemanticToken { get }

    var colorActionPrimaryHoverOnBgEmphasized: ColorSemanticToken { get }

    var colorActionPrimaryPressed: ColorSemanticToken { get }

    var colorActionPrimaryPressedOnBgEmphasized: ColorSemanticToken { get }

    var colorActionPrimaryLoading: ColorSemanticToken { get }

    var colorActionPrimaryLoadingOnBgEmphasized: ColorSemanticToken { get }

    var colorActionPrimaryFocus: ColorSemanticToken { get }

    var colorActionPrimaryFocusOnBgEmphasized: ColorSemanticToken { get }

    var colorActionSecondaryEnabled: ColorSemanticToken { get }

    var colorActionSecondaryEnabledOnBgEmphasized: ColorSemanticToken { get }

    var colorActionSecondaryHover: ColorSemanticToken { get }

    var colorActionSecondaryHoverOnBgEmphasized: ColorSemanticToken { get }

    var colorActionSecondaryPressed: ColorSemanticToken { get }

    var colorActionSecondaryPressedOnBgEmphasized: ColorSemanticToken { get }

    var colorActionSecondaryLoading: ColorSemanticToken { get }

    var colorActionSecondaryLoadingOnBgEmphasized: ColorSemanticToken { get }

    var colorActionSecondaryFocus: ColorSemanticToken { get }

    var colorActionSecondaryFocusOnBgEmphasized: ColorSemanticToken { get }

    var colorActionNegativeEnabled: ColorSemanticToken { get }

    var colorActionNegativeHover: ColorSemanticToken { get }

    var colorActionNegativePressed: ColorSemanticToken { get }

    var colorActionNegativeLoading: ColorSemanticToken { get }

    var colorActionNegativeFocus: ColorSemanticToken { get }

    var colorActionOnBgActionDisabled: ColorSemanticToken { get }

    var colorActionOnBgActionDisabledOnBgEmphasized: ColorSemanticToken { get }

    var colorActionOnBgActionNegative: ColorSemanticToken { get }

    var colorActionOnBgActionPrimaryEnabled: ColorSemanticToken { get }

    var colorActionOnBgActionPrimaryEnabledOnBgEmphasized: ColorSemanticToken { get }

    var colorActionOnBgActionPrimaryHover: ColorSemanticToken { get }

    var colorActionOnBgActionPrimaryHoverOnBgEmphasized: ColorSemanticToken { get }

    var colorActionOnBgActionPrimaryPressed: ColorSemanticToken { get }

    var colorActionOnBgActionPrimaryPressedOnBgEmphasized: ColorSemanticToken { get }

    var colorActionOnBgActionPrimaryLoading: ColorSemanticToken { get }

    var colorActionOnBgActionPrimaryLoadingOnBgEmphasized: ColorSemanticToken { get }

    var colorActionOnBgActionPrimaryFocus: ColorSemanticToken { get }

    var colorActionOnBgActionPrimaryFocusOnBgEmphasized: ColorSemanticToken { get }

    var colorActionOnBgActionSecondaryEnabled: ColorSemanticToken { get }

    var colorActionOnBgActionSecondaryEnabledOnBgEmphasized: ColorSemanticToken { get }

    var colorActionOnBgActionSecondaryHover: ColorSemanticToken { get }

    var colorActionOnBgActionSecondaryHoverOnBgEmphasized: ColorSemanticToken { get }

    var colorActionOnBgActionSecondaryPressed: ColorSemanticToken { get }

    var colorActionOnBgActionSecondaryPressedOnBgEmphasized: ColorSemanticToken { get }

    var colorActionOnBgActionSecondaryLoading: ColorSemanticToken { get }

    var colorActionOnBgActionSecondaryLoadingOnBgEmphasized: ColorSemanticToken { get }

    var colorActionOnBgActionSecondaryFocus: ColorSemanticToken { get }

    var colorActionOnBgActionSecondaryFocusOnBgEmphasized: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Always

    var colorAlwaysBlack: ColorSemanticToken { get }

    var colorAlwaysWhite: ColorSemanticToken { get }

    var colorAlwaysWarning: ColorSemanticToken { get }

    var colorAlwaysNegative: ColorSemanticToken { get }

    var colorAlwaysPositive: ColorSemanticToken { get }

    var colorAlwaysInfo: ColorSemanticToken { get }

    var colorAlwaysAccent: ColorSemanticToken { get }

    var colorAlwaysOnBgBlack: ColorSemanticToken { get }

    var colorAlwaysOnBgWhite: ColorSemanticToken { get }

    var colorAlwaysOnBgWarning: ColorSemanticToken { get }

    var colorAlwaysOnBgNegative: ColorSemanticToken { get }

    var colorAlwaysOnBgPositive: ColorSemanticToken { get }

    var colorAlwaysOnBgInfo: ColorSemanticToken { get }

    var colorAlwaysOnBgAccent: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Transparent

    var colorTransparentDefault: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Elevation

    var colorElevationRaised: ColorSemanticToken { get }

    var colorElevationRaisedOnBgSecondary: ColorSemanticToken { get }

    var colorElevationRaisedOnBgEmphasized: ColorSemanticToken { get }

    var colorElevationDrag: ColorSemanticToken { get }

    var colorElevationDragOnBgSecondary: ColorSemanticToken { get }

    var colorElevationDragOnBgEmphasized: ColorSemanticToken { get }

    var colorElevationOverlayDefault: ColorSemanticToken { get }

    var colorElevationOverlayDefaultOnBgSecondary: ColorSemanticToken { get }

    var colorElevationOverlayDefaultOnBgEmphasized: ColorSemanticToken { get }

    var colorElevationOverlayEmphasized: ColorSemanticToken { get }

    var colorElevationOverlayEmphasizedOnBgSecondary: ColorSemanticToken { get }

    var colorElevationOverlayEmphasizedOnBgEmphasized: ColorSemanticToken { get }

    var colorElevationModal: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Decorative

    var colorDecorativePrimary: ColorSemanticToken { get }

    var colorDecorativeSecondary: ColorSemanticToken { get }

    var colorDecorativeTertiary: ColorSemanticToken { get }

    var colorDecorativeNeutralMuted: ColorSemanticToken { get }

    var colorDecorativeNeutralDefault: ColorSemanticToken { get }

    var colorDecorativeNeutralEmphasized: ColorSemanticToken { get }

    var colorDecorativeAccent1Muted: ColorSemanticToken { get }

    var colorDecorativeAccent1Default: ColorSemanticToken { get }

    var colorDecorativeAccent1Emphasized: ColorSemanticToken { get }

    var colorDecorativeAccent2Muted: ColorSemanticToken { get }

    var colorDecorativeAccent2Default: ColorSemanticToken { get }

    var colorDecorativeAccent2Emphasized: ColorSemanticToken { get }

    var colorDecorativeAccent3Muted: ColorSemanticToken { get }

    var colorDecorativeAccent3Default: ColorSemanticToken { get }

    var colorDecorativeAccent3Emphasized: ColorSemanticToken { get }

    var colorDecorativeAccent4Muted: ColorSemanticToken { get }

    var colorDecorativeAccent4Default: ColorSemanticToken { get }

    var colorDecorativeAccent4Emphasized: ColorSemanticToken { get }

    var colorDecorativeAccent5Muted: ColorSemanticToken { get }

    var colorDecorativeAccent5Default: ColorSemanticToken { get }

    var colorDecorativeAccent5Emphasized: ColorSemanticToken { get }

    var colorDecorativeSkinTint100: ColorSemanticToken { get }

    var colorDecorativeSkinTint200: ColorSemanticToken { get }

    var colorDecorativeSkinTint300: ColorSemanticToken { get }

    var colorDecorativeSkinTint400: ColorSemanticToken { get }

    var colorDecorativeSkinTint500: ColorSemanticToken { get }

    var colorDecorativeSkinTint600: ColorSemanticToken { get }

    var colorDecorativeSkinTint700: ColorSemanticToken { get }

    var colorDecorativeSkinTint800: ColorSemanticToken { get }

    var colorDecorativeSkinTint900: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Chart

    var colorChartCategoricalNeutral: ColorSemanticToken { get }

    var colorChartCategoricalBrand: ColorSemanticToken { get }

    var colorChartCategoricalPositive: ColorSemanticToken { get }

    var colorChartCategoricalNegative: ColorSemanticToken { get }

    var colorChartCategoricalTier1: ColorSemanticToken { get }

    var colorChartCategoricalTier2: ColorSemanticToken { get }

    var colorChartCategoricalTier3: ColorSemanticToken { get }

    var colorChartCategoricalTier4: ColorSemanticToken { get }

    var colorChartCategoricalTier5: ColorSemanticToken { get }

    var colorChartCategoricalTier6: ColorSemanticToken { get }

    var colorChartCategoricalTier7: ColorSemanticToken { get }

    var colorChartCategoricalTier8: ColorSemanticToken { get }

    var colorChartCategoricalTier9: ColorSemanticToken { get }

    var colorChartCategoricalTier10: ColorSemanticToken { get }

    var colorChartSequentialAccent1Tint100: ColorSemanticToken { get }

    var colorChartSequentialAccent1Tint200: ColorSemanticToken { get }

    var colorChartSequentialAccent1Tint300: ColorSemanticToken { get }

    var colorChartSequentialAccent1Tint400: ColorSemanticToken { get }

    var colorChartSequentialAccent1Tint500: ColorSemanticToken { get }

    var colorChartSequentialAccent1Tint600: ColorSemanticToken { get }

    var colorChartSequentialAccent1Tint700: ColorSemanticToken { get }

    var colorChartSequentialAccent1Tint800: ColorSemanticToken { get }

    var colorChartSequentialAccent1Tint900: ColorSemanticToken { get }

    var colorChartSequentialAccent2Tint100: ColorSemanticToken { get }

    var colorChartSequentialAccent2Tint200: ColorSemanticToken { get }

    var colorChartSequentialAccent2Tint300: ColorSemanticToken { get }

    var colorChartSequentialAccent2Tint400: ColorSemanticToken { get }

    var colorChartSequentialAccent2Tint500: ColorSemanticToken { get }

    var colorChartSequentialAccent2Tint600: ColorSemanticToken { get }

    var colorChartSequentialAccent2Tint700: ColorSemanticToken { get }

    var colorChartSequentialAccent2Tint800: ColorSemanticToken { get }

    var colorChartSequentialAccent2Tint900: ColorSemanticToken { get }

    var colorChartSequentialAccent3Tint100: ColorSemanticToken { get }

    var colorChartSequentialAccent3Tint200: ColorSemanticToken { get }

    var colorChartSequentialAccent3Tint300: ColorSemanticToken { get }

    var colorChartSequentialAccent3Tint400: ColorSemanticToken { get }

    var colorChartSequentialAccent3Tint500: ColorSemanticToken { get }

    var colorChartSequentialAccent3Tint600: ColorSemanticToken { get }

    var colorChartSequentialAccent3Tint700: ColorSemanticToken { get }

    var colorChartSequentialAccent3Tint800: ColorSemanticToken { get }

    var colorChartSequentialAccent3Tint900: ColorSemanticToken { get }

    var colorChartSequentialAccent4Tint100: ColorSemanticToken { get }

    var colorChartSequentialAccent4Tint200: ColorSemanticToken { get }

    var colorChartSequentialAccent4Tint300: ColorSemanticToken { get }

    var colorChartSequentialAccent4Tint400: ColorSemanticToken { get }

    var colorChartSequentialAccent4Tint500: ColorSemanticToken { get }

    var colorChartSequentialAccent4Tint600: ColorSemanticToken { get }

    var colorChartSequentialAccent4Tint700: ColorSemanticToken { get }

    var colorChartSequentialAccent4Tint800: ColorSemanticToken { get }

    var colorChartSequentialAccent4Tint900: ColorSemanticToken { get }

    var colorChartSequentialAccent5Tint100: ColorSemanticToken { get }

    var colorChartSequentialAccent5Tint200: ColorSemanticToken { get }

    var colorChartSequentialAccent5Tint300: ColorSemanticToken { get }

    var colorChartSequentialAccent5Tint400: ColorSemanticToken { get }

    var colorChartSequentialAccent5Tint500: ColorSemanticToken { get }

    var colorChartSequentialAccent5Tint600: ColorSemanticToken { get }

    var colorChartSequentialAccent5Tint700: ColorSemanticToken { get }

    var colorChartSequentialAccent5Tint800: ColorSemanticToken { get }

    var colorChartSequentialAccent5Tint900: ColorSemanticToken { get }
}

// swiftlint:enable missing_docs
// swiftlint:enable identifier_name
