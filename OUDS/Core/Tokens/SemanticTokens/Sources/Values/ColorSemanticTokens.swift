//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
// 
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
// 
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System 
//

// ଘ( ･ω･)_/ﾟ･:*:･｡☆
// [File to generate with the tokenator]
// WARNING: Not synchronized anymore with the Figjam

// swiftlint:disable missing_docs

/// This is a group of semantic tokens for **colors**.
/// It defines all `ColorSemanticToken` and `ColorAliasSemanticToken` a theme must have.
/// Because `ColorSemanticToken` can be based on `ColorAliasSemanticToken` which are optional, the instanciation of such values can result to `nil`, 
/// so semantic tokens are optional today.
///
/// In the future this file should be generated by a parser converting Figma JSON to Swift code.
public protocol ColorSemanticTokens {

    // MARK: Semantic token - Colors - Background

    var colorBackgroundPrimary: ColorSemanticToken { get }

    var colorBackgroundSecondary: ColorSemanticToken { get }

    var colorBackgroundTertiary: ColorSemanticToken { get }

    var colorBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundBrandPrimary: ColorSemanticToken { get }

    var colorBackgroundBrandSecondary: ColorSemanticToken { get }

    var colorBackgroundBrandTertiary: ColorSemanticToken { get }

    var colorBackgroundStatusNeutral: ColorSemanticToken { get }

    var colorBackgroundStatusNeutralOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusPositiveMuted: ColorSemanticToken { get }

    var colorBackgroundStatusPositiveMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusPositiveEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusInfoMuted: ColorSemanticToken { get }

    var colorBackgroundStatusInfoMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusInfoEmphasized: ColorSemanticToken { get }
    
    var colorBackgroundStatusWarningMuted: ColorSemanticToken { get }

    var colorBackgroundStatusWarningMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusWarningEmphasized: ColorSemanticToken { get }
    
    var colorBackgroundStatusNegativeMuted: ColorSemanticToken { get }

    var colorBackgroundStatusNegativeMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusNegativeEmphasized: ColorSemanticToken { get }
    
    var colorBackgroundStatusAccentMuted: ColorSemanticToken { get }

    var colorBackgroundStatusAccentMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusAccentEmphasized: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Background - Action

    var colorBackgroundActionEnabled: ColorSemanticToken { get }

    var colorBackgroundActionEnabledOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundActionEnabledOnBackgroundStatusExcNegative: ColorSemanticToken { get }

    var colorBackgroundActionEnabledOnBackgroundStatusNegative: ColorSemanticToken { get }

    var colorBackgroundActionPressed: ColorSemanticToken { get }

    var colorBackgroundActionPressedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundActionPressedOnBackgroundStatusExcNegative: ColorSemanticToken { get }

    var colorBackgroundActionPressedOnBackgroundStautsNegative: ColorSemanticToken { get }

    var colorBackgroundActionDisabled: ColorSemanticToken { get }

    var colorBackgroundActionDisabledOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundActionDisabledOnBackgroundStatusExcNegative: ColorSemanticToken { get }

    var colorBackgroundActionDisabledOnBackgroundStatusNegative: ColorSemanticToken { get }

    var colorBackgroundActionFocus: ColorSemanticToken { get }

    var colorBackgroundActionFocusOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundActionFocusOnBackgroundStatusExcNegative: ColorSemanticToken { get }

    var colorBackgroundActionFocusOnBackgroundStatusNegative: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Background - Always

    var colorBackgroundAlwaysBlack: ColorSemanticToken { get }

    var colorBackgroundAlwaysWhite: ColorSemanticToken { get }

    var colorBackgroundAlwaysAttractive: ColorSemanticToken { get }

    var colorBackgroundAlwaysWarning: ColorSemanticToken { get }

    var colorBackgroundAlwaysNegative: ColorSemanticToken { get }

    var colorBackgroundAlwaysPositive: ColorSemanticToken { get }

    var colorBackgroundAlwaysInformation: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Background - Transparent

    var colorBackgroundTransparentDefault: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Content

    var colorContentDefault: ColorSemanticToken { get }

    var colorContentDefaultOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorContentDefaultOnBackgroundBrandPrimary: ColorSemanticToken { get }

    var colorContentMuted: ColorSemanticToken { get }

    var colorContentMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorContentDisabled: ColorSemanticToken { get }

    var colorContentDisabledOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorContentBrandPrimary: ColorSemanticToken { get }

    var colorContentBrandPrimaryOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorContentBrandSecondary: ColorSemanticToken { get }

    var colorContentBrandTertiary: ColorSemanticToken { get }

    var colorContentStatusAttractive: ColorSemanticToken { get }

    var colorContentStatusNegative: ColorSemanticToken { get }

    var colorContentStatusPositive: ColorSemanticToken { get }

    var colorContentStatusInformation: ColorSemanticToken { get }

    var colorContentActionEnabled: ColorSemanticToken { get }

    var colorContentActionEnabledOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorContentActionEnabledOnBackgroundStatusExcNegative: ColorSemanticToken { get }

    var colorContentActionEnabledOnBackgroundStatusNegative: ColorSemanticToken { get }

    var colorContentActionHover: ColorSemanticToken { get }

    var colorContentActionHoverOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorContentActionHoverOnBackgroundStatusExcNegative: ColorSemanticToken { get }

    var colorContentActionHoverOnBackgroundStatusNegative: ColorSemanticToken { get }

    var colorContentTransparentDefault: ColorSemanticToken { get }

    // TODO: #124 - Add missing colorContentActionPressed* tokens
    // TODO: #124 - Add missing colorContentActionDisabled* tokens
    // TODO: #124 - Add missing colorContentActionFocus* tokens
    // TODO: #124 - Add missing colorContentVisited* tokens
    // TODO: #124 - Add missing colorContentActionSelectionSelected* tokens
    // TODO: #124 - Add missing colorContentActionSelectionHover* tokens
    // TODO: #124 - Add missing colorContentActionSelectionPressed* tokens
    // TODO: #124 - Add missing colorContentActionSelectionSelectedFocus* tokens
    // TODO: #124 - Add missing colorContentActionSelectionUnselected* tokens
    // TODO: #124 - Add missing colorContentActionAlways* tokens

    // MARK: Semantic token - Colors - Border

    var colorBorderDefault: ColorSemanticToken { get }

    var colorBorderDefaultOnBackgroundEmphasized: ColorSemanticToken { get }

    // TODO: #124 - Add missing colorBorderDefaultOnBackgroundBrandPrimary
    // TODO: #124 - Add missing colorBorderDefaultOnBackgroundBrandSecondary
    // TODO: #124 - Add missing colorBorderDefaultOnBackgroundBrandTertiary

    var colorBorderEmphasized: ColorSemanticToken { get }

    var colorBorderEmphasizedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBorderBrandPrimary: ColorSemanticToken { get }

    var colorBorderBrandPrimaryOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBorderBrandSecondary: ColorSemanticToken { get }

    var colorBorderBrandTertiary: ColorSemanticToken { get }

    var colorBorderBrandStatusAttractive: ColorSemanticToken { get }

    var colorBorderBrandStatusWarning: ColorSemanticToken { get }

    var colorBorderBrandStatusNegative: ColorSemanticToken { get }

    var colorBorderBrandStatusPositive: ColorSemanticToken { get }

    var colorBorderBrandStatusInformation: ColorSemanticToken { get }

    var colorBorderTransparentDefault: ColorSemanticToken { get }

}

// swiftlint:enable missing_docs
