//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
// 
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
// 
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System 
//

// ଘ( ･ω･)_/ﾟ･:*:･｡☆
// [File to generate with the tokenator]
// WARNING: Not synchronized anymore with the Figjam

// swiftlint:disable missing_docs

/// This is a group of semantic tokens for **colors**.
/// It defines all `ColorSemanticToken` and `ColorAliasSemanticToken` a theme must have.
/// Because `ColorSemanticToken` can be based on `ColorAliasSemanticToken` which are optional, the instanciation of such values can result to `nil`, 
/// so semantic tokens are optional today.
///
/// In the future this file should be generated by a parser converting Figma JSON to Swift code.
public protocol ColorSemanticTokens {

    // MARK: Semantic token - Colors - Background

    var colorBackgroundPrimary: ColorSemanticToken { get }

    var colorBackgroundSecondary: ColorSemanticToken { get }

    var colorBackgroundTertiary: ColorSemanticToken { get }

    var colorBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundBrandPrimary: ColorSemanticToken { get }

    var colorBackgroundBrandSecondary: ColorSemanticToken { get }

    var colorBackgroundBrandTertiary: ColorSemanticToken { get }

    var colorBackgroundStatusNeutral: ColorSemanticToken { get }

    var colorBackgroundStatusNeutralOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusPositiveMuted: ColorSemanticToken { get }

    var colorBackgroundStatusPositiveMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusPositiveEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusInfoMuted: ColorSemanticToken { get }

    var colorBackgroundStatusInfoMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusInfoEmphasized: ColorSemanticToken { get }
    
    var colorBackgroundStatusWarningMuted: ColorSemanticToken { get }

    var colorBackgroundStatusWarningMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusWarningEmphasized: ColorSemanticToken { get }
    
    var colorBackgroundStatusNegativeMuted: ColorSemanticToken { get }

    var colorBackgroundStatusNegativeMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusNegativeEmphasized: ColorSemanticToken { get }
    
    var colorBackgroundStatusAccentMuted: ColorSemanticToken { get }

    var colorBackgroundStatusAccentMutedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBackgroundStatusAccentEmphasized: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Content - Status

    var colorContentDefault: ColorSemanticToken { get }

    var colorContentContentDefaultOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorContentMuted: ColorSemanticToken { get }

    var colorContentContentMutedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorContentDisabled: ColorSemanticToken { get }

    var colorContentContentDisabledOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorContentBrandPrimary: ColorSemanticToken { get }

    var colorContentBrandSecondary: ColorSemanticToken { get }

    var colorContentBrandTertiary: ColorSemanticToken { get }

    var colorContentStatusPositive: ColorSemanticToken { get }
    
    var colorContentStatusInfo: ColorSemanticToken { get }
    
    var colorContentStatusWarning: ColorSemanticToken { get }

    var colorContentStatusNegative: ColorSemanticToken { get }

    var colorContentStatusAccent: ColorSemanticToken { get }
    
    // MARK: Semantic token - Colors - Content - On Background
    
    var colorContentOnBackgroundPrimary: ColorSemanticToken { get }

    var colorContentOnBackgroundSecondary: ColorSemanticToken { get }
    
    var colorContentOnBackgroundTertiary: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusPositiveMuted: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusPositiveMutedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusPositiveEmphasized: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusInfoMuted: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusInfoMutedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusInfoEmphasized: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusWarningMuted: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusWarningMutedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusWarningEmphasized: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusNegativeMuted: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusNegativeMutedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusNegativeEmphasized: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusAccentMuted: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusAccentMutedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorContentOnBackgroundStatusAccentedEmphasized: ColorSemanticToken { get }
    
    // MARK: Semantic token - Colors - Border

    var colorBorderDefault: ColorSemanticToken { get }

    var colorBorderDefaultOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBorderEmphasized: ColorSemanticToken { get }

    var colorBorderEmphasizedOnBackgroundEmphasized: ColorSemanticToken { get }

    var colorBorderFocus: ColorSemanticToken { get }
    
    var colorBorderBrandPrimaryOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorBorderBrandPrimary: ColorSemanticToken { get }

    var colorBorderBrandSecondary: ColorSemanticToken { get }

    var colorBorderBrandTertiary: ColorSemanticToken { get }
    
    var colorBorderBrandStatusPositive: ColorSemanticToken { get }

    var colorBorderBrandStatusInformation: ColorSemanticToken { get }

    var colorBorderBrandStatusWarning: ColorSemanticToken { get }

    var colorBorderBrandStatusNegative: ColorSemanticToken { get }

    var colorBorderBrandStatusAccent: ColorSemanticToken { get }
    
    var colorBorderOnBackgroundBrandPrimary: ColorSemanticToken { get }
    
    var colorBorderOnBackgroundBrandSecondary: ColorSemanticToken { get }
    
    var colorBorderOnBackgroundBrandTertiary: ColorSemanticToken { get }
    
    // MARK: Semantic token - Colors - Action
    
    var colorActionSelected: ColorSemanticToken { get }
    
    var colorActionSelectedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionDisabled: ColorSemanticToken { get }
    
    var colorActionDisabledOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionVisited: ColorSemanticToken { get }
    
    var colorActionVistedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionPrimaryEnabled: ColorSemanticToken { get }
    
    var colorActionPrimaryEnabledOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionPrimaryHover: ColorSemanticToken { get }
    
    var colorActionPrimaryHoverOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionPrimaryPressed: ColorSemanticToken { get }
    
    var colorActionPrimaryPressedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionPrimaryLoading: ColorSemanticToken { get }
    
    var colorActionPrimaryLoadingOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionPrimaryFocus: ColorSemanticToken { get }
    
    var colorActionPrimaryFocusOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionSecondaryEnabled: ColorSemanticToken { get }
    
    var colorActionSecondaryEnabledOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionSecondaryHover: ColorSemanticToken { get }
    
    var colorActionSecondaryHoverOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionSecondaryPressed: ColorSemanticToken { get }
    
    var colorActionSecondaryPressedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionSecondaryLoading: ColorSemanticToken { get }
    
    var colorActionSecondaryLoadingOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionSecondaryFocus: ColorSemanticToken { get }
    
    var colorActionSecondaryFocusOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionNegativeEnabled: ColorSemanticToken { get }
    
    var colorActionNegativeHover: ColorSemanticToken { get }
    
    var colorActionNegativePressed: ColorSemanticToken { get }
    
    var colorActionNegativeLoading: ColorSemanticToken { get }
    
    var colorActionNegativeFocus: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionDisabled: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionDisabledOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionNegative: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionPrimaryEnabled: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionPrimaryEnabledOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionPrimaryHover: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionPrimaryHoverOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionPrimaryPressed: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionPrimaryPressedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionPrimaryLoading: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionPrimaryLoadingOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionPrimaryFocus: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionPrimaryFocusOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionSecondaryEnabled: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionSecondaryEnabledOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionSecondaryHover: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionSecondaryHoverOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionSecondaryPressed: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionSecondaryPressedOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionSecondaryLoading: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionSecondaryLoadingOnBackgroundEmphasized: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionSecondaryFocus: ColorSemanticToken { get }
    
    var colorActionOnBackgroundActionSecondaryFocusOnBackgroundEmphasized: ColorSemanticToken { get }

    // MARK: Semantic token - Colors - Always
    
    var colorAlwaysBlack: ColorSemanticToken { get }
    
    var colorAlwaysWhite: ColorSemanticToken { get }
    
    var colorAlwaysWarning: ColorSemanticToken { get }
    
    var colorAlwaysNegative: ColorSemanticToken { get }
    
    var colorAlwaysPositive: ColorSemanticToken { get }
    
    var colorAlwaysInfo: ColorSemanticToken { get }
    
    var colorAlwaysAccent: ColorSemanticToken { get }
    
    var colorAlwaysOnBackgroundBlack: ColorSemanticToken { get }
    
    var colorAlwaysOnBackgroundWhite: ColorSemanticToken { get }
    
    var colorAlwaysOnBackgroundWarning: ColorSemanticToken { get }
    
    var colorAlwaysOnBackgroundNegative: ColorSemanticToken { get }
    
    var colorAlwaysOnBackgroundPositive: ColorSemanticToken { get }
    
    var colorAlwaysOnBackgroundInfo: ColorSemanticToken { get }
    
    var colorAlwaysOnBackgroundAccent: ColorSemanticToken { get }
 
    // MARK: Semantic token - Colors - Transparent
    
    var colorTransparentDefault: ColorSemanticToken { get }
    
}

// swiftlint:enable missing_docs
