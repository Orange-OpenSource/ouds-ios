//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
// 
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
// 
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System 
//

// [File not generated by the tokenator]
// WARNING: Not synchronized anymore with the Figjam / Figma by developers team
// Create an issue for update https://github.com/Orange-OpenSource/ouds-ios/issues/new?template=token_update.yml

// swiftlint:disable missing_docs
// swiftlint:disable identifier_name
// swiftlint:disable line_length

/// This is a group of semantic tokens for **colors** but using ``MultipleColorSemanticTokens``.
///
/// In fact the ``MultipleColorSemanticTokens`` class will help users (i.e. developers) to handle one semantic token for color containing values for light and dark modes.
/// Because *Figma* is not able to manage pair of values for one token, and its produced JSON does not reflect this mecanism, the *tokenator* cannot provide such ``MultipleColorSemanticTokens``. Thus the "real" color semantic tokens are declared in ``ColorSemanticTokens`` protocol and defined inside `OUDSTheme` (to be overridable then by subthemes). These tokens are updated by the *tokenator*. Then they are gathered and wrapped so as to be used easily thanks to this ``ColorMultipleSemanticTokens`` which must be updated manually.
///
/// In few words:
///
/// ```swift
///         // Some color raw tokens, defined by the tokenator (in ColorRawTokens+Values.swift)
///         public static let colorDecorativeAmber100: ColorRawToken = "#FFF0CC"
///         public static let colorDecorativeAmber200: ColorRawToken = "#FFE199"
///
///         // The color semantic tokens using them
///         // declared (in ColorSemanticTokens.swift) and defined (in OUDSTheme+ColorSemanticTokens.swift) by the tokenator
///         var colorBgPrimaryLight: ColorSemanticTokens { ColorRawTokens.colorDecorativeAmber100 }
///         var colorBgPrimaryDark: ColorSemanticTokens { ColorRawTokens.colorDecorativeAmber200 }
///
///         // The 'higher level' color semantic tokens wrapping them and exposed to users
///         // declared (in this ColorMultipleSemanticTokens.swift) and defined manualy (in OUDSTheme+ColorMultipleSemanticTokens.swift)
///         var colorBgPrimary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(light: colorBgPrimaryLight, dark: colorBgPrimaryDark) }
///
///         // Thus users can in their components use colorBgPrimary as defined in their design system
///         // (even if they are still able to use 'lower level' semantic tokens but it is more error-prone)
/// ```
/// 
public protocol ColorMultipleSemanticTokens {

    // MARK: Semantic token - Colors - Background

    var colorBgPrimary: MultipleColorSemanticTokens { get }

    var colorBgSecondary: MultipleColorSemanticTokens { get }

    var colorBgTertiary: MultipleColorSemanticTokens { get }

    var colorBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBgBrandPrimary: MultipleColorSemanticTokens { get }

    var colorBgStatusNeutral: MultipleColorSemanticTokens { get }

    var colorBgStatusNeutralOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBgStatusPositiveMuted: MultipleColorSemanticTokens { get }

    var colorBgStatusPositiveMutedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBgStatusPositiveEmphasized: MultipleColorSemanticTokens { get }

    var colorBgStatusInfoMuted: MultipleColorSemanticTokens { get }

    var colorBgStatusInfoMutedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBgStatusInfoEmphasized: MultipleColorSemanticTokens { get }

    var colorBgStatusWarningMuted: MultipleColorSemanticTokens { get }

    var colorBgStatusWarningMutedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBgStatusWarningEmphasized: MultipleColorSemanticTokens { get }

    var colorBgStatusNegativeMuted: MultipleColorSemanticTokens { get }

    var colorBgStatusNegativeMutedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBgStatusNegativeEmphasized: MultipleColorSemanticTokens { get }

    var colorBgStatusAccentMuted: MultipleColorSemanticTokens { get }

    var colorBgStatusAccentMutedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBgStatusAccentEmphasized: MultipleColorSemanticTokens { get }

    // MARK: Semantic token - Colors - Content - Status

    var colorContentDefault: MultipleColorSemanticTokens { get }

    var colorContentDefaultOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorContentMuted: MultipleColorSemanticTokens { get }

    var colorContentMutedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorContentDisabled: MultipleColorSemanticTokens { get }

    var colorContentDisabledOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorContentBrandPrimary: MultipleColorSemanticTokens { get }

    var colorContentBrandPrimaryOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorContentStatusPositive: MultipleColorSemanticTokens { get }

    var colorContentStatusInfo: MultipleColorSemanticTokens { get }

    var colorContentStatusWarning: MultipleColorSemanticTokens { get }

    var colorContentStatusNegative: MultipleColorSemanticTokens { get }

    var colorContentStatusAccent: MultipleColorSemanticTokens { get }
    
    var colorContentOnActionDisabled: MultipleColorSemanticTokens { get }

    var colorContentOnActionDisabledOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnActionNegative: MultipleColorSemanticTokens { get }
    
    var colorContentOnActionPrimaryEnabled: MultipleColorSemanticTokens { get }
    
    var colorContentOnActionPrimaryEnabledOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnActionPrimaryFocus: MultipleColorSemanticTokens { get }
    
    var colorContentOnActionPrimaryFocusOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnActionPrimaryHover: MultipleColorSemanticTokens { get }
    
    var colorContentOnActionPrimaryHoverOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorContentOnActionPrimaryLoading: MultipleColorSemanticTokens { get }
        
    var colorContentOnActionPrimaryLoadingOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnActionPrimaryPressed: MultipleColorSemanticTokens { get }
    
    var colorContentOnActionPrimaryPressedOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnBrandPrimary: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusAccentEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusAccentMuted: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusAccentMutedOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusInfoEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusInfoMuted: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusInfoMutedOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusNegativeEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusNegativeMuted: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusNegativeMutedOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusPositiveEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusPositiveMuted: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusPositiveMutedOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusWarningEmphasized: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusWarningMuted: MultipleColorSemanticTokens { get }
    
    var colorContentOnStatusWarningMutedOnBgEmphasized: MultipleColorSemanticTokens { get }

    // MARK: Semantic token - Colors - Border

    var colorBorderDefault: MultipleColorSemanticTokens { get }

    var colorBorderDefaultOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBorderEmphasized: MultipleColorSemanticTokens { get }

    var colorBorderEmphasizedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBorderFocus: MultipleColorSemanticTokens { get }

    var colorBorderFocusInset: MultipleColorSemanticTokens { get }
    
    var colorBorderFocusInsetOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorBorderFocusOnBgEmphasized: MultipleColorSemanticTokens { get }
    
    var colorBorderBrandPrimaryOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBorderBrandPrimary: MultipleColorSemanticTokens { get }

    var colorBorderOnBrandPrimary: MultipleColorSemanticTokens { get }
    
    // MARK: Semantic token - Colors - Action

    var colorActionSelected: MultipleColorSemanticTokens { get }

    var colorActionSelectedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionDisabled: MultipleColorSemanticTokens { get }

    var colorActionDisabledOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionVisited: MultipleColorSemanticTokens { get }

    var colorActionVisitedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionPrimaryEnabled: MultipleColorSemanticTokens { get }

    var colorActionPrimaryEnabledOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionPrimaryHover: MultipleColorSemanticTokens { get }

    var colorActionPrimaryHoverOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionPrimaryPressed: MultipleColorSemanticTokens { get }

    var colorActionPrimaryPressedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionPrimaryLoading: MultipleColorSemanticTokens { get }

    var colorActionPrimaryLoadingOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionPrimaryFocus: MultipleColorSemanticTokens { get }

    var colorActionPrimaryFocusOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionSecondaryEnabled: MultipleColorSemanticTokens { get }

    var colorActionSecondaryEnabledOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionSecondaryHover: MultipleColorSemanticTokens { get }

    var colorActionSecondaryHoverOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionSecondaryPressed: MultipleColorSemanticTokens { get }

    var colorActionSecondaryPressedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionSecondaryLoading: MultipleColorSemanticTokens { get }

    var colorActionSecondaryLoadingOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionSecondaryFocus: MultipleColorSemanticTokens { get }

    var colorActionSecondaryFocusOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorActionNegativeEnabled: MultipleColorSemanticTokens { get }

    var colorActionNegativeHover: MultipleColorSemanticTokens { get }

    var colorActionNegativePressed: MultipleColorSemanticTokens { get }

    var colorActionNegativeLoading: MultipleColorSemanticTokens { get }

    var colorActionNegativeFocus: MultipleColorSemanticTokens { get }

    // MARK: Semantic token - Colors - Always

    var colorAlwaysBlack: MultipleColorSemanticTokens { get }

    var colorAlwaysWhite: MultipleColorSemanticTokens { get }

    var colorAlwaysWarning: MultipleColorSemanticTokens { get }

    var colorAlwaysNegative: MultipleColorSemanticTokens { get }
        
    var colorAlwaysPositive: MultipleColorSemanticTokens { get }

    var colorAlwaysInfo: MultipleColorSemanticTokens { get }

    var colorAlwaysAccent: MultipleColorSemanticTokens { get }

    var colorAlwaysOnAccent: MultipleColorSemanticTokens { get }
    
    var colorAlwaysOnBlack: MultipleColorSemanticTokens { get }
    
    var colorAlwaysOnInfo: MultipleColorSemanticTokens { get }
    
    var colorAlwaysOnNegative: MultipleColorSemanticTokens { get }
    
    var colorAlwaysOnPositive: MultipleColorSemanticTokens { get }
    
    var colorAlwaysOnWarning: MultipleColorSemanticTokens { get }
    
    var colorAlwaysOnWhite: MultipleColorSemanticTokens { get }
    
    // MARK: Semantic token - Colors - Transparent

    var colorTransparentDefault: MultipleColorSemanticTokens { get }

    // MARK: Semantic token - Colors - Elevation

    var colorElevationRaised: MultipleColorSemanticTokens { get }

    var colorElevationRaisedOnBgSecondary: MultipleColorSemanticTokens { get }

    var colorElevationRaisedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorElevationDrag: MultipleColorSemanticTokens { get }

    var colorElevationDragOnBgSecondary: MultipleColorSemanticTokens { get }

    var colorElevationDragOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorElevationOverlayDefault: MultipleColorSemanticTokens { get }

    var colorElevationOverlayDefaultOnBgSecondary: MultipleColorSemanticTokens { get }

    var colorElevationOverlayDefaultOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorElevationOverlayEmphasized: MultipleColorSemanticTokens { get }

    var colorElevationOverlayEmphasizedOnBgSecondary: MultipleColorSemanticTokens { get }

    var colorElevationOverlayEmphasizedOnBgEmphasized: MultipleColorSemanticTokens { get }

    var colorElevationModal: MultipleColorSemanticTokens { get }

    // MARK: Semantic token - Colors - Decorative

    var colorDecorativeBrandPrimary: MultipleColorSemanticTokens { get }

    var colorDecorativeBrandSecondary: MultipleColorSemanticTokens { get }

    var colorDecorativeBrandTertiary: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralMuted: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralDefault: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralEmphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent1Muted: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent1Default: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent1Emphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent2Muted: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent2Default: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent2Emphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent3Muted: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent3Default: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent3Emphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent4Muted: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent4Default: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent4Emphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent5Muted: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent5Default: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent5Emphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint100: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint200: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint300: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint400: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint500: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint600: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint700: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint800: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint900: MultipleColorSemanticTokens { get }

    // MARK: Semantic token - Colors - Chart

    var colorChartCategoricalNeutral: MultipleColorSemanticTokens { get }

    var colorChartCategoricalBrand: MultipleColorSemanticTokens { get }

    var colorChartCategoricalPositive: MultipleColorSemanticTokens { get }

    var colorChartCategoricalNegative: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier1: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier2: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier3: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier4: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier5: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier6: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier7: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier8: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier9: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier10: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent1Tint100: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent1Tint200: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent1Tint300: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent1Tint400: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent1Tint500: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent1Tint600: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent1Tint700: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent1Tint800: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent1Tint900: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent2Tint100: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent2Tint200: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent2Tint300: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent2Tint400: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent2Tint500: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent2Tint600: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent2Tint700: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent2Tint800: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent2Tint900: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent3Tint100: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent3Tint200: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent3Tint300: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent3Tint400: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent3Tint500: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent3Tint600: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent3Tint700: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent3Tint800: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent3Tint900: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent4Tint100: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent4Tint200: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent4Tint300: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent4Tint400: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent4Tint500: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent4Tint600: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent4Tint700: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent4Tint800: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent4Tint900: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent5Tint100: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent5Tint200: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent5Tint300: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent5Tint400: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent5Tint500: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent5Tint600: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent5Tint700: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent5Tint800: MultipleColorSemanticTokens { get }

    var colorChartSequentialAccent5Tint900: MultipleColorSemanticTokens { get }
}

// swiftlint:enable missing_docs
// swiftlint:enable identifier_name
// swiftlint:enable line_length
