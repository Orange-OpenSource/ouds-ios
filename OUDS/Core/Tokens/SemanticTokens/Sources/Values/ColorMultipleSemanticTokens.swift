//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

// [File not generated by the tokenator]
// WARNING: Not synchronized anymore with the Figjam / Figma by developers team
// Create an issue for update https://github.com/Orange-OpenSource/ouds-ios/issues/new?template=token_update.yml

// swiftlint:disable missing_docs
// swiftlint:disable line_length

/// This is a group of semantic tokens for **colors** but using ``MultipleColorSemanticTokens``.
///
/// In fact the ``MultipleColorSemanticTokens`` class will help users (i.e. developers) to handle one semantic token for color containing values for light and dark modes.
/// Because *Figma* is not able to manage pair of values for one token, and its produced JSON does not reflect this mecanism, the *tokenator* cannot provide such ``MultipleColorSemanticTokens``. Thus the "real" color semantic tokens are declared in ``ColorSemanticTokens`` protocol and defined inside `OUDSTheme` (to be overridable then by subthemes). These tokens are updated by the *tokenator*. Then they are gathered and wrapped so as to be used easily thanks to this ``ColorMultipleSemanticTokens`` which must be updated manually.
///
/// In few words:
///
/// ```swift
///         // Some color raw tokens, defined by the tokenator (in ColorRawTokens+Values.swift)
///         public static let colorDecorativeAmber100: ColorRawToken = "#FFF0CC00"
///         public static let colorDecorativeAmber200: ColorRawToken = "#FFE199FF"
///
///         // The color semantic tokens using them
///         // declared (in ColorSemanticTokens.swift) and defined (in OUDSTheme+ColorSemanticTokens.swift) by the tokenator
///         var colorBgPrimary: ColorSemanticTokens { ColorRawTokens.colorDecorativeAmber100 }
///         var colorBgPrimaryDark: ColorSemanticTokens { ColorRawTokens.colorDecorativeAmber200 }
///
///         // The 'higher level' color semantic tokens wrapping them and exposed to users
///         // declared (in this ColorMultipleSemanticTokens.swift) and defined manualy (in OUDSTheme+ColorMultipleSemanticTokens.swift)
///         var colorBgPrimary: MultipleColorSemanticTokens { MultipleColorSemanticTokens(: colorBgPrimaryLight, dark: colorBgPrimaryDark) }
///
///         // Thus users can in their components use colorBgPrimary as defined in their design system
///         // (even if they are still able to use 'lower level' semantic tokens but it is more error-prone)
/// ```
///
/// - Since: 0.8.0
public protocol ColorMultipleSemanticTokens {

    // MARK: - Color - Opacity

    var colorOpacityLowest: MultipleColorSemanticTokens { get }

    var colorOpacityLower: MultipleColorSemanticTokens { get }

    var colorOpacityTransparent: MultipleColorSemanticTokens { get }

    // MARK: - Color - Action

    var colorActionDisabled: MultipleColorSemanticTokens { get }

    var colorActionEnabled: MultipleColorSemanticTokens { get }

    var colorActionFocus: MultipleColorSemanticTokens { get }

    var colorActionHighlighted: MultipleColorSemanticTokens { get }

    var colorActionHover: MultipleColorSemanticTokens { get }

    var colorActionLoading: MultipleColorSemanticTokens { get }

    var colorActionNegativeEnabled: MultipleColorSemanticTokens { get }

    var colorActionNegativeFocus: MultipleColorSemanticTokens { get }

    var colorActionNegativeHover: MultipleColorSemanticTokens { get }

    var colorActionNegativeLoading: MultipleColorSemanticTokens { get }

    var colorActionNegativePressed: MultipleColorSemanticTokens { get }

    var colorActionPressed: MultipleColorSemanticTokens { get }

    var colorActionSelected: MultipleColorSemanticTokens { get }

    var colorActionSupportEnabled: MultipleColorSemanticTokens { get }

    var colorActionSupportFocus: MultipleColorSemanticTokens { get }

    var colorActionSupportHover: MultipleColorSemanticTokens { get }

    var colorActionSupportLoading: MultipleColorSemanticTokens { get }

    var colorActionSupportPressed: MultipleColorSemanticTokens { get }

    var colorActionVisited: MultipleColorSemanticTokens { get }

    // MARK: - Color - Background

    var colorBgEmphasized: MultipleColorSemanticTokens { get }

    var colorBgPrimary: MultipleColorSemanticTokens { get }

    var colorBgSecondary: MultipleColorSemanticTokens { get }

    var colorBgTertiary: MultipleColorSemanticTokens { get }

    // MARK: - Color - Border

    var colorBorderBrandPrimary: MultipleColorSemanticTokens { get }

    var colorBorderDefault: MultipleColorSemanticTokens { get }

    var colorBorderEmphasized: MultipleColorSemanticTokens { get }

    var colorBorderFocus: MultipleColorSemanticTokens { get }

    var colorBorderFocusInset: MultipleColorSemanticTokens { get }

    var colorBorderMuted: MultipleColorSemanticTokens { get }

    var colorBorderOnBrandPrimary: MultipleColorSemanticTokens { get }

    // MARK: - Color - Content

    var colorContentBrandPrimary: MultipleColorSemanticTokens { get }

    var colorContentDefault: MultipleColorSemanticTokens { get }

    var colorContentDisabled: MultipleColorSemanticTokens { get }

    var colorContentMuted: MultipleColorSemanticTokens { get }

    var colorContentOnActionDisabled: MultipleColorSemanticTokens { get }

    var colorContentOnActionEnabled: MultipleColorSemanticTokens { get }

    var colorContentOnActionFocus: MultipleColorSemanticTokens { get }

    var colorContentOnActionHighlighted: MultipleColorSemanticTokens { get }

    var colorContentOnActionHover: MultipleColorSemanticTokens { get }

    var colorContentOnActionLoading: MultipleColorSemanticTokens { get }

    var colorContentOnActionPressed: MultipleColorSemanticTokens { get }

    var colorContentOnBrandPrimary: MultipleColorSemanticTokens { get }

    var colorContentOnOverlayEmphasized: MultipleColorSemanticTokens { get }

    var colorContentOnStatusNeutralEmphasized: MultipleColorSemanticTokens { get }

    var colorContentOnStatusNegativeEmphasized: MultipleColorSemanticTokens { get }

    var colorContentOnStatusNeutralMuted: MultipleColorSemanticTokens { get }

    var colorContentStatusInfo: MultipleColorSemanticTokens { get }

    var colorContentStatusNegative: MultipleColorSemanticTokens { get }

    var colorContentStatusPositive: MultipleColorSemanticTokens { get }

    var colorContentStatusWarning: MultipleColorSemanticTokens { get }

    // MARK: - Color - Overlay

    var colorOverlayDefault: MultipleColorSemanticTokens { get }

    var colorOverlayDrag: MultipleColorSemanticTokens { get }

    var colorOverlayEmphasized: MultipleColorSemanticTokens { get }

    var colorOverlayModal: MultipleColorSemanticTokens { get }

    // MARK: - Color - Surface

    var colorSurfaceBrandPrimary: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusAccentEmphasized: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusAccentMuted: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusInfoEmphasized: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusInfoMuted: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusNegativeEmphasized: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusNegativeMuted: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusNeutralEmphasized: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusNeutralMuted: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusPositiveEmphasized: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusPositiveMuted: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusWarningEmphasized: MultipleColorSemanticTokens { get }

    var colorSurfaceStatusWarningMuted: MultipleColorSemanticTokens { get }

    // MARK: - Color - Decorative

    var colorDecorativeAccent1Default: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent1Emphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent1Muted: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent2Default: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent2Emphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent2Muted: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent3Default: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent3Emphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent3Muted: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent4Default: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent4Emphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent4Muted: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent5Default: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent5Emphasized: MultipleColorSemanticTokens { get }

    var colorDecorativeAccent5Muted: MultipleColorSemanticTokens { get }

    var colorDecorativeBrandPrimary: MultipleColorSemanticTokens { get }

    var colorDecorativeBrandSecondary: MultipleColorSemanticTokens { get }

    var colorDecorativeBrandTertiary: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint100: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint200: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint300: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint400: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint500: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint600: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint700: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint800: MultipleColorSemanticTokens { get }

    var colorDecorativeSkinTint900: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralEmphasizedHigher: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralEmphasizedLow: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralEmphasizedLower: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralEmphasizedLowest: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralMutedHigh: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralMutedHigher: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralMutedHighest: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralMutedLow: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralMutedLower: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralMutedLowest: MultipleColorSemanticTokens { get }

    var colorDecorativeNeutralMutedMedium: MultipleColorSemanticTokens { get }

    // MARK: - Color - Chart

    var colorChartBorder: MultipleColorSemanticTokens { get }

    var colorChartBorderContrast: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier1: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier2: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier3: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier4: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier5: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier6: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier7: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier8: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier9: MultipleColorSemanticTokens { get }

    var colorChartCategoricalTier10: MultipleColorSemanticTokens { get }

    var colorChartFunctionalInfo: MultipleColorSemanticTokens { get }

    var colorChartFunctionalNegative: MultipleColorSemanticTokens { get }

    var colorChartFunctionalPositive: MultipleColorSemanticTokens { get }

    var colorChartFunctionalWarning: MultipleColorSemanticTokens { get }

    var colorChartGridlines: MultipleColorSemanticTokens { get }

    var colorChartHighlight: MultipleColorSemanticTokens { get }

    var colorChartNeutral: MultipleColorSemanticTokens { get }
}

// swiftlint:enable missing_docs
// swiftlint:enable line_length
