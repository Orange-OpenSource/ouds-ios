//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
// 
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
// 
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System 
//

// ଘ( ･ω･)_/ﾟ･:*:･｡☆
// [File to generate with the tokenator]

/// This is a group of semantic tokens for **sizing**.
/// It defines all `SizingSemanticToken` a theme must have.
///
/// In the future this file should be generated by a parser converting Figma JSON to Swift code.
public protocol SizingSemanticTokens {

    // MARK: - Semantic token - Sizing - Icon decorative

    var sizeIconDecorativeShortest: SizingSemanticToken { get }
    var sizeIconDecorativeShorter: SizingSemanticToken { get }
    var sizeIconDecorativeShort: SizingSemanticToken { get }
    var sizeIconDecorativeMedium: SizingSemanticToken { get }
    var sizeIconDecorativeTall: SizingSemanticToken { get }
    var sizeIconDecorativeTaller: SizingSemanticToken { get }
    var sizeIconDecorativeTallest: SizingSemanticToken { get }

    // MARK: - Semantic token - Sizing - Icon with typography

    var sizeIconWithHeadingSmallShort: MultipleSizingTokens { get }
    var sizeIconWithHeadingSmallMedium: MultipleSizingTokens { get }
    var sizeIconWithHeadingSmallTall: MultipleSizingTokens { get }

    var sizeIconWithHeadingMediumShort: MultipleSizingTokens { get }
    var sizeIconWithHeadingMediumMedium: MultipleSizingTokens { get }
    var sizeIconWithHeadingMediumTall: MultipleSizingTokens { get }

    var sizeIconWithHeadingLargeShort: MultipleSizingTokens { get }
    var sizeIconWithHeadingLargeMedium: MultipleSizingTokens { get }
    var sizeIconWithHeadingLargeTall: MultipleSizingTokens { get }

    var sizeIconWithHeadingXLargeShort: MultipleSizingTokens { get }
    var sizeIconWithHeadingXLargeMedium: MultipleSizingTokens { get }
    var sizeIconWithHeadingXLargeTall: MultipleSizingTokens { get }

    var sizeIconWithBodySmallShort: MultipleSizingTokens { get }
    var sizeIconWithBodySmallMedium: MultipleSizingTokens { get }
    var sizeIconWithBodySmallTall: MultipleSizingTokens { get }

    var sizeIconWithBodyMediumShort: MultipleSizingTokens { get }
    var sizeIconWithBodyMediumMedium: MultipleSizingTokens { get }
    var sizeIconWithBodyMediumTall: MultipleSizingTokens { get }

    var sizeIconWithBodyLargeShort: MultipleSizingTokens { get }
    var sizeIconWithBodyLargeMedium: MultipleSizingTokens { get }
    var sizeIconWithBodyLargeTall: MultipleSizingTokens { get }

    var sizeIconWithLabelSmallSizeShort: SizingSemanticToken { get }
    var sizeIconWithLabelSmallSizeMedium: SizingSemanticToken { get }
    var sizeIconWithLabelSmallSizeTall: SizingSemanticToken { get }

    var sizeIconWithLabelMediumSizeShort: SizingSemanticToken { get }
    var sizeIconWithLabelMediumSizeMedium: SizingSemanticToken { get }
    var sizeIconWithLabelMediumSizeTall: SizingSemanticToken { get }

    var sizeIconWithLabelLargeSizeShorter: SizingSemanticToken { get }
    var sizeIconWithLabelLargeSizeShort: SizingSemanticToken { get }
    var sizeIconWithLabelLargeSizeMedium: SizingSemanticToken { get }
    var sizeIconWithLabelLargeSizeTall: SizingSemanticToken { get }
    var sizeIconWithLabelLargeSizeTaller: SizingSemanticToken { get }

    var sizeIconWithLabelXLargeSizeShort: SizingSemanticToken { get }
    var sizeIconWithLabelXLargeSizeMedium: SizingSemanticToken { get }
    var sizeIconWithLabelXLargeSizeTall: SizingSemanticToken { get }

    // MARK: - Semantic token - Sizing - Max width typography

    var sizeMaxWidthTypeDisplaySmall: MultipleSizingTokens { get }
    var sizeMaxWidthTypeDisplayMedium: MultipleSizingTokens { get }
    var sizeMaxWidthTypeDisplayLarge: MultipleSizingTokens { get }

    var sizeMaxWidthTypeHeadingSmall: MultipleSizingTokens { get }
    var sizeMaxWidthTypeHeadingMedium: MultipleSizingTokens { get }
    var sizeMaxWidthTypeHeadingLarge: MultipleSizingTokens { get }
    var sizeMaxWidthTypeHeadingXLarge: MultipleSizingTokens { get }

    var sizeMaxWidthTypeBodySmall: MultipleSizingTokens { get }
    var sizeMaxWidthTypeBodyMedium: MultipleSizingTokens { get }
    var sizeMaxWidthTypeBodyLarge: MultipleSizingTokens { get }
}
