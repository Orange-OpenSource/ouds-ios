//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
// 
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
// 
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System 
//

import OUDSTokensRaw

// ଘ( ･ω･)_/ﾟ･:*:･｡☆
// [File to generate with the tokenator]

/// This is a group of semantic tokens for **typography**.
/// It defines all typography semantic tokens a theme must have
/// (`TypographyFontFamilySemanticToken`, `TypographyFontWeightSemanticToken`, `TypographyFontSizeSemanticToken`, `TypographyFontLineHeightSemanticToken`).
///
/// In the future this file should be generated by a parser converting Figma JSON to Swift code.
public protocol TypographySemanticTokens {

    // MARK: - Semantic token - Typography - Font - Family

    var fontFamily: TypographyFontFamilyRawToken { get }
    var fontFamilyDisplay: TypographyFontFamilySemanticToken { get }
    var fontFamilyHeading: TypographyFontFamilySemanticToken { get }
    var fontFamilyBody: TypographyFontFamilySemanticToken { get }
    var fontFamilyLabel: TypographyFontFamilySemanticToken { get }
    var fontFamilyCode: TypographyFontFamilySemanticToken { get }

    // MARK: - Semantic token - Typography - Font - Weight

    var fontWeightDefault: TypographyFontWeightSemanticToken { get }
    var fontWeightStrong: TypographyFontWeightSemanticToken { get }
    var fontWeightDisplay: TypographyFontWeightSemanticToken { get }
    var fontWeightHeading: TypographyFontWeightSemanticToken { get }
    var fontWeightBodyDefault: TypographyFontWeightSemanticToken { get }
    var fontWeightBodyStrong: TypographyFontWeightSemanticToken { get }
    var fontWeightLabelDefault: TypographyFontWeightSemanticToken { get }
    var fontWeightLabelStrong: TypographyFontWeightSemanticToken { get }
    var fontWeightCode: TypographyFontWeightSemanticToken { get }

    // MARK: - Semantic token - Typography - Font - Size

    var fontSizeDisplayLarge: MultipleFontSizeTokens { get }
    var fontSizeDisplayMedium: MultipleFontSizeTokens { get }
    var fontSizeDisplaySmall: MultipleFontSizeTokens { get }
    var fontSizeHeadingXLarge: MultipleFontSizeTokens { get }
    var fontSizeHeadingLarge: MultipleFontSizeTokens { get }
    var fontSizeHeadingMedium: MultipleFontSizeTokens { get }
    var fontSizeHeadingSmall: MultipleFontSizeTokens { get }
    var fontSizeBodyLarge: MultipleFontSizeTokens { get }
    var fontSizeBodyMedium: MultipleFontSizeTokens { get }
    var fontSizeBodySmall: MultipleFontSizeTokens { get }

    // MARK: - Semantic token - Typography - Font - Size - Others

    var fontSizeLabelXLarge: TypographyFontSizeSemanticToken { get }
    var fontSizeLabelLarge: TypographyFontSizeSemanticToken { get }
    var fontSizeLabelMedium: TypographyFontSizeSemanticToken { get }
    var fontSizeLabelSmall: TypographyFontSizeSemanticToken { get }
    var fontSizeCodeMedium: TypographyFontSizeSemanticToken { get }
    var fontSizeCodeSmall: TypographyFontSizeSemanticToken { get }

    // MARK: - Semantic token - Typography - Font - Line height

    var fontLineHeightDisplayLarge: MultipleFontLineHeightTokens { get }
    var fontLineHeightDisplayMedium: MultipleFontLineHeightTokens { get }
    var fontLineHeightDisplaySmall: MultipleFontLineHeightTokens { get }
    var fontLineHeightHeadingXLarge: MultipleFontLineHeightTokens { get }
    var fontLineHeightHeadingLarge: MultipleFontLineHeightTokens { get }
    var fontLineHeightHeadingMedium: MultipleFontLineHeightTokens { get }
    var fontLineHeightHeadingSmall: MultipleFontLineHeightTokens { get }
    var fontLineHeightBodyLarge: MultipleFontLineHeightTokens { get }
    var fontLineHeightBodyMedium: MultipleFontLineHeightTokens { get }
    var fontLineHeightBodySmall: MultipleFontLineHeightTokens { get }
    var fontLineHeightLabelXLarge: MultipleFontLineHeightTokens { get }
    var fontLineHeightLabelLarge: MultipleFontLineHeightTokens { get }
    var fontLineHeightLabelMedium: MultipleFontLineHeightTokens { get }
    var fontLineHeightLabelSmall: MultipleFontLineHeightTokens { get }
    var fontLineHeightCodeMedium: MultipleFontLineHeightTokens { get }
    var fontLineHeightCodeSmall: MultipleFontLineHeightTokens { get }

    // MARK: - Semantic token - Typography - Font - Letter spacing - Mobile (extra-compact/compact)

    var fontLetterSpacingMobileDisplayLarge: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingMobileDisplayMedium: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingMobileDisplaySmall: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingMobileHeadingXLarge: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingMobileHeadingLarge: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingMobileHeadingMedium: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingMobileHeadingSmall: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingMobileBodyLarge: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingMobileBodyMedium: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingMobileBodySmall: TypographyFontLetterSpacingSemanticToken { get }

    // MARK: - Semantic token - Typography - Font - Letter spacing - Tablet (regular/medium)

    var fontLetterSpacingTabletDisplayLarge: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingTabletDisplayMedium: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingTabletDisplaySmall: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingTabletHeadingXLarge: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingTabletHeadingLarge: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingTabletHeadingMedium: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingTabletHeadingSmall: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingTabletBodyLarge: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingTabletBodyMedium: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingTabletBodySmall: TypographyFontLetterSpacingSemanticToken { get }

    // MARK: - Semantic token - Typography - Font - Letter spacing - Others

    var fontLetterSpacingLabelXLarge: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingLabelLarge: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingLabelMedium: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingLabelSmall: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingCodeMedium: TypographyFontLetterSpacingSemanticToken { get }
    var fontLetterSpacingCodeSmall: TypographyFontLetterSpacingSemanticToken { get }

    // MARK: - Semantic tokens - Typography - Composites - Display

    var typeDisplayLarge: MultipleTypographyTokens { get }
    var typeDisplayMedium: MultipleTypographyTokens { get }
    var typeDisplaySmall: MultipleTypographyTokens { get }

    // MARK: - Semantic tokens - Typography - Composites - Heading

    var typeHeadingXLarge: MultipleTypographyTokens { get }
    var typeHeadingLarge: MultipleTypographyTokens { get }
    var typeHeadingMedium: MultipleTypographyTokens { get }
    var typeHeadingSmall: MultipleTypographyTokens { get }

    // MARK: - Semantic tokens - Typography - Composites - Body

    var typeBodyDefaultLarge: MultipleTypographyTokens { get }
    var typeBodyDefaultMedium: MultipleTypographyTokens { get }
    var typeBodyDefaultSmall: MultipleTypographyTokens { get }
    var typeBodyStrongLarge: MultipleTypographyTokens { get }
    var typeBodyStrongMedium: MultipleTypographyTokens { get }
    var typeBodyStrongSmall: MultipleTypographyTokens { get }

    // MARK: - Semantic tokens - Typography - Composites - Label

    var typeLabelDefaultXLarge: MultipleTypographyTokens { get }
    var typeLabelDefaultLarge: MultipleTypographyTokens { get }
    var typeLabelDefaultMedium: MultipleTypographyTokens { get }
    var typeLabelDefaultSmall: MultipleTypographyTokens { get }
    var typeLabelStrongXLarge: MultipleTypographyTokens { get }
    var typeLabelStrongLarge: MultipleTypographyTokens { get }
    var typeLabelStrongMedium: MultipleTypographyTokens { get }
    var typeLabelStrongSmall: MultipleTypographyTokens { get }

    // MARK: - Semantic tokens - Typography - Composites - Code

    var typeCodeMedium: MultipleTypographyTokens { get }
    var typeCodeSmall: MultipleTypographyTokens { get }
}
