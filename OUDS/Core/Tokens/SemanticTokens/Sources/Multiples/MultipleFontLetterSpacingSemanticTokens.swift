//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import Foundation
import OUDSTokensRaw

// swiftlint:disable line_length

/// Kind of semantic tokens which will wrap a combination of ``MultipleFontLetterSpacingSemanticTokens`` depending to size classes.
/// Allows to gather the multiple-value tokens from *Figma* inside one object.
/// If a font letter spacing token exists with its value depending to the size class (i.e. comapct or regular mode), it must be packed in such `MultipleFontLetterSpacingSemanticTokens`
///
/// ```swift
///         // Assuming in Figma with have a font letter spacing semantic token fontLetterSpacingDisplayMedium,
///         // two semantic font letter spacing tokens will be defined in Figma and generated by tokenator because
///         // its value can vary if comapct or regular modes.
///         // They can be declared in protocol FontSemanticTokens,
///         // and defined automaticaly in OUDSTheme+FontSemanticTokens extension
///         var fontLetterSpacingDisplayMediumMobile: FontLetterSpacingSemanticToken { FontRawTokens.fontLetterSpacing750 }
///         var fontLetterSpacingDisplayMediumTablet: FontLetterSpacingSemanticToken { FontRawTokens.fontLetterSpacing1050 }
///
///         // Then the develoment team declares an "higher" level font letter spacing semantic token for fontLetterSpacingDisplayMedium
///         // inside FontMultipleSemanticTokens protocol,
///         // and defined inside OUDSTheme+FontMultipleSemanticTokens extension
///         var fontLetterSpacingDisplayMedium: MultipleFontLetterSpacingSemanticTokens {
///             MultipleFontLetterSpacingSemanticTokens(compact: fontLetterSpacingDisplayMediumMobile, regular: fontLetterSpacingDisplayMediumTablet)
///         }
///
///         // If the same value is used whatever the size class is
///         var fontLetterSpacingDisplayMedium: MultipleFontLetterSpacingSemanticTokens { MultipleFontLetterSpacingSemanticTokens(fontLetterSpacingDisplayMediumMobile) }
///
///         // The theme exposes both generated font letter spacing semantic tokens and "crafted" higher level color semantic tokens.
///         // It is recommended to use the higher level version as it is less error-prone.
/// ```
/// 
public final class MultipleFontLetterSpacingSemanticTokens: NSObject, Sendable {

    /// For **extra-compact** and **compact** viewports
    public let compact: FontLetterSpacingSemanticToken

    /// For **regular** and **medium** viewports
    public let regular: FontLetterSpacingSemanticToken

    /// Initializes a new multiple font token with the same value for both *compact* and *regular* size classes
    /// - Parameter value: The `FontLetterSpacingSemanticToken` to apply if device in *compact* mode
    public init(_ value: FontLetterSpacingSemanticToken) {
        self.compact = value
        self.regular = value
    }

    /// Initializes a new multiple font token.
    /// - Parameters:
    ///    - compact: The `FontLetterSpacingSemanticToken` to apply if device in *compact* mode
    ///    - regular: The `FontLetterSpacingSemanticToken` to apply if device in *regular* mode
    public init(compact: FontLetterSpacingSemanticToken, regular: FontLetterSpacingSemanticToken) {
        self.compact = compact
        self.regular = regular
    }

    deinit { }

    /// Returns `true` if `self` and `object` has the same `compact` and `regular` values and with `object`
    /// as a `MultipleFontTokens`. Otherwise returns `false`.
    /// `isEqual` override is preferred for `NSObject`.
    override public func isEqual(_ object: Any?) -> Bool {
        guard let object = object as? MultipleFontLetterSpacingSemanticTokens else {
            return false
        }
        return self.compact == object.compact && self.regular == object.regular
    }
}// swiftlint:enable line_length
