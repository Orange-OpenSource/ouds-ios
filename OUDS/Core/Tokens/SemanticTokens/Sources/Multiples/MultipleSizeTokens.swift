//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
// 
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
// 
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System 
//

import Foundation
import SwiftUICore

/// Kind of semantic tokens which will wrap a combination of ``SizeSemanticToken`` depending to viewports / size classes.
/// Kind of composite token with multiple values, but not named "composite" because this word is already used in the design system.
/// Allows to gather the multiple-value tokens from Figma inside one object.
/// If a size token exists with its value depending to the size class, it must be packed in such ``MultipleSizeSemanticTokens``.
///
/// ```swift
///         // Assuming in Figma with have a size semantic token sizeIconWithHeadingXLargeTall,
///         // two semantic size tokens will be defined in Figma and generated by tokenator because
///         // its value can vary if compact or regular modes.
///         // They can be declared in protocol SizeSemanticTokens,
///         // and defined automaticaly in OUDSTheme+SizeSemanticTokens extension
///         var sizeIconWithHeadingXLargeTallMobile: SizeSemanticToken { DimensionRawTokens.dimension650 }
///         var sizeIconWithHeadingXLargeTallTablet: SizeSemanticToken { DimensionRawTokens.dimension800 }
///
///         // Then the develoment team declares an "higher" level size semantic token for sizeIconWithHeadingXLargeTall
///         // inside SizeMultipleSemanticTokens protocol,
///         // and defined inside OUDSTheme+SizeMultipleSemanticTokens extension
///         var sizeIconWithHeadingXLargeTall: MultipleSizeSemanticTokens {
///             MultipleSizeSemanticTokens(compact: sizeIconWithHeadingXLargeTallMobile, regular: sizeIconWithHeadingXLargeTallTablet)
///         }
///
///         // If the same value is used whatever the size class is
///         var sizeIconWithHeadingXLargeTall: MultipleSizeSemanticTokens { MultipleSizeSemanticTokens(sizeIconWithHeadingXLargeTallTablet) }
///
///         // The theme exposes both generated font size semantic tokens and "crafted" higher level color semantic tokens.
///         // It is recommended to use the higher level version as it is less error-prone.
/// ```
/// 
public final class MultipleSizeSemanticTokens: NSObject, Sendable {

    /// For **extra-compact** and **compact** viewports
    public let compact: SizeSemanticToken

    /// For **regular** and **medium** viewports
    public let regular: SizeSemanticToken

    /// Initializes a new sizing composite semantic token.
    /// - Parameter value: The `SizeSemanticToken` to apply if device in *compact* mode or *regular* mode
    public init(_ value: SizeSemanticToken) {
        self.compact = value
        self.regular = value
    }

    /// Initializes a new sizing composite semantic token.
    /// - Parameters:
    ///    - compact: The `SizeSemanticToken` to apply if device in *compact* mode
    ///    - regular: The `SizeSemanticToken` to apply if device in *regular* mode
    public init(compact: SizeSemanticToken, regular: SizeSemanticToken) {
        self.compact = compact
        self.regular = regular
    }

    deinit { }

    /// Returns `true` if `self` and `object` has the same `compact` and `regular` values and with `object`
    /// as a `MultipleSizeSemanticTokens`. Otherwise returns `false`.
    /// `isEqual` override is preferred for `NSObject`.
    override public func isEqual(_ object: Any?) -> Bool {
        guard let other = object as? MultipleSizeSemanticTokens else {
            return false
        }
        return self.compact == other.compact && self.regular == other.regular
    }

    /// Returns the right dimension according to the `userInterfaceSizeClass`.
    /// - Parameter userInterfaceSizeClass: The user interface size class (could be the horizontal or the vertical size class)
    /// - Returns: The right size semantic token (pointing to the dimension raw token to use)
    public func dimension(for userInterfaceSizeClass: UserInterfaceSizeClass) -> SizeSemanticToken {
        userInterfaceSizeClass == .compact ? compact : regular
    }
}
