//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import Foundation
import OUDSTokensRaw

/// Kind of semantic tokens which will wrap a combination of ``FontSizeSemanticToken`` depending to size classes.
/// Allows to gather the multiple-value tokens from Figma inside one object.
/// If a font size exists with its value depending to the size class, it must be packed in such ``MultipleFontSizeSemanticTokens``.
///
/// ```swift
///         // Assuming in Figma with have a font size semantic token fontSizeBodySmall,
///         // two semantic font size tokens will be defined in Figma and generated by tokenator because
///         // its value can vary if compact or regular modes.
///         // They can be declared in protocol FontSemanticTokens,
///         // and defined automaticaly in OUDSTheme+FontSemanticTokens extension
///         var fontSizeBodySmallMobile: FontSizeSemanticToken { FontRawTokens.fontSize150 }
///         var fontSizeBodySmallTablet: FontSizeSemanticToken { FontRawTokens.fontSize150 }
///
///         // Then the develoment team declares an "higher" level font size semantic token for fontSizeBodySmall
///         // inside FontMultipleSemanticTokens protocol,
///         // and defined inside OUDSTheme+FontMultipleSemanticTokens extension
///         var fontSizeBodySmall: MultipleFontSizeSemanticTokens { MultipleFontSizeSemanticTokens(compact: fontSizeBodySmallMobile, regular: fontSizeBodySmallTablet) }
///
///         // If the same value is used whatever the size class is
///         var fontSizeBodySmall: MultipleFontSizeSemanticTokens { MultipleFontSizeSemanticTokens(fontSizeBodySmallMobile) }
///
///         // The theme exposes both generated font size semantic tokens and "crafted" higher level color semantic tokens.
///         // It is recommended to use the higher level version as it is less error-prone.
/// ```
///
/// - Since: 0.8.0
public final class MultipleFontSizeSemanticTokens: NSObject, Sendable {

    /// For **extra-compact** and **compact** viewports
    public let compact: FontSizeSemanticToken

    /// For **regular** and **medium** viewports
    public let regular: FontSizeSemanticToken

    /// Initializes a new multiple font token with the same value for both *compact* and *regular* size classes
    /// - Parameter value: The `FontSizeSemanticToken` to apply if device in *compact* mode
    public init(_ value: FontSizeSemanticToken) {
        compact = value
        regular = value
    }

    /// Initializes a new multiple font token.
    /// - Parameters:
    ///    - compact: The `FontSizeSemanticToken` to apply if device in *compact* mode
    ///    - regular: The `FontSizeSemanticToken` to apply if device in *regular* mode
    public init(compact: FontSizeSemanticToken, regular: FontSizeSemanticToken) {
        self.compact = compact
        self.regular = regular
    }

    deinit {}

    /// Returns `true` if `self` and `object` has the same `compact` and `regular` values and with `object`
    /// as a `MultipleFontTokens`. Otherwise returns `false`.
    /// `isEqual` override is preferred for `NSObject`.
    override public func isEqual(_ object: Any?) -> Bool {
        guard let object = object as? MultipleFontSizeSemanticTokens else {
            return false
        }
        return compact == object.compact && regular == object.regular
    }
}
