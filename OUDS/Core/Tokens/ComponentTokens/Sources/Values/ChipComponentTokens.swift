//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import OUDSTokensSemantic

// [File not generated by the tokenator]
// WARNING: Not synchronized anymore with the Figjam / Figma by developers team
// Create an issue for update https://github.com/Orange-OpenSource/ouds-ios/issues/new?template=token_update.yml

// swiftlint:disable missing_docs

/// Declares all component tokens for chips components like `OUDSChip`
/// Use for tokens providers like `OrangeThemeChipComponentTokensProvider`.
///
/// - Since: 0.10.0
public protocol ChipComponentTokens {

    // MARK: - Sizes

    var chipSizeIcon: SizeSemanticToken { get }
    var chipSizeMinWidth: SizeSemanticToken { get }
    var chipSizeMinHeight: SizeSemanticToken { get }
    var chipSizeMinHeightInteractiveArea: SizeSemanticToken { get }

    // MARK: - Borders

    var chipBorderWidthSelected: BorderWidthSemanticToken { get }
    var chipBorderWidthUnselected: BorderWidthSemanticToken { get }
    var chipBorderWidthUnselectedInteraction: BorderWidthSemanticToken { get }
    var chipBorderRadius: BorderRadiusSemanticToken { get }

    // MARK: - Colors

    var chipBadgeColorBg: MultipleColorSemanticTokens { get }
    var chipBadgeColorContent: MultipleColorSemanticTokens { get }
    var chipColorBgSelectedEnabled: MultipleColorSemanticTokens { get }
    var chipColorBgSelectedHover: MultipleColorSemanticTokens { get }
    var chipColorBgSelectedPressed: MultipleColorSemanticTokens { get }
    var chipColorBgSelectedDisabled: MultipleColorSemanticTokens { get }
    var chipColorBgSelectedFocus: MultipleColorSemanticTokens { get }
    var chipColorBgUnselectedEnabled: MultipleColorSemanticTokens { get }
    var chipColorBgUnselectedHover: MultipleColorSemanticTokens { get }
    var chipColorBgUnselectedPressed: MultipleColorSemanticTokens { get }
    var chipColorBgUnselectedDisabled: MultipleColorSemanticTokens { get }
    var chipColorBgUnselectedFocus: MultipleColorSemanticTokens { get }
    var chipColorContentSelectedTickEnabled: MultipleColorSemanticTokens { get }
    var chipColorContentSelectedEnabled: MultipleColorSemanticTokens { get }
    var chipColorContentSelectedPressed: MultipleColorSemanticTokens { get }
    var chipColorContentSelectedHover: MultipleColorSemanticTokens { get }
    var chipColorContentSelectedDisabled: MultipleColorSemanticTokens { get }
    var chipColorContentSelectedFocus: MultipleColorSemanticTokens { get }
    var chipColorContentUnselectedEnabled: MultipleColorSemanticTokens { get }
    var chipColorContentUnselectedHover: MultipleColorSemanticTokens { get }
    var chipColorContentUnselectedPressed: MultipleColorSemanticTokens { get }
    var chipColorContentUnselectedDisabled: MultipleColorSemanticTokens { get }
    var chipColorBorderSelectedEnabled: MultipleColorSemanticTokens { get }
    var chipColorBorderSelectedHover: MultipleColorSemanticTokens { get }
    var chipColorBorderSelectedPressed: MultipleColorSemanticTokens { get }
    var chipColorBorderSelectedDisabled: MultipleColorSemanticTokens { get }
    var chipColorBorderSelectedFocus: MultipleColorSemanticTokens { get }
    var chipColorBorderUnselectedEnabled: MultipleColorSemanticTokens { get }
    var chipColorBorderUnselectedHover: MultipleColorSemanticTokens { get }
    var chipColorBorderUnselectedPressed: MultipleColorSemanticTokens { get }
    var chipColorBorderUnselectedDisabled: MultipleColorSemanticTokens { get }
    var chipColorBorderUnselectedFocus: MultipleColorSemanticTokens { get }

    // MARK: - Spaces

    var chipSpacePaddingBlock: SpaceSemanticToken { get }
    var chipSpacePaddingBlockIconOnly: SpaceSemanticToken { get }
    var chipSpacePaddingInlineIcon: SpaceSemanticToken { get }
    var chipSpacePaddingInlineIconNone: SpaceSemanticToken { get }
    var chipSpacePaddingInlineChevronEnd: SpaceSemanticToken { get }
    var chipSpacePaddingInlineBadgeStart: SpaceSemanticToken { get }
    var chipSpaceColumnGapIcon: SpaceSemanticToken { get }
}

// swiftlint:enable missing_docs
