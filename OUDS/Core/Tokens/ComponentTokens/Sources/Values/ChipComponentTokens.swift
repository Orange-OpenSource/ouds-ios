//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import OUDSTokensSemantic

// [File not generated by the tokenator]
// WARNING: Not synchronized anymore with the Figjam / Figma by developers team
// Create an issue for update https://github.com/Orange-OpenSource/ouds-ios/issues/new?template=token_update.yml

// swiftlint:disable missing_docs

/// Declares all component tokens for tags components like `OUDSChip`
/// Use for tokens providers like `OrangeThemeChipComponentTokensProvider`.
///
/// - Since: 0.10.0
public protocol ChipComponentTokens {

    // MARK: - Sizes

    var chipSizeMaxHeight: SizeSemanticToken { get }
    var chipSizeMinHeight: SizeSemanticToken { get }
    var chipSizeIcon: SizeSemanticToken { get }

    // MARK: - Borders

    var chipBorderRadiusPill: BorderRadiusSemanticToken { get }
    var chipBorderWidthDefault: BorderWidthSemanticToken { get }
    var chipBorderWidthDefaultInteraction: BorderWidthSemanticToken { get }
    var chipBorderWidthDefaultInteractionMono: BorderWidthSemanticToken { get }

    // MARK: - Colors

    var chipColorBgDisabled: MultipleColorSemanticTokens { get }
    var chipColorBgDisabledMono: MultipleColorSemanticTokens { get }
    var chipColorBgEnabled: MultipleColorSemanticTokens { get }
    var chipColorBgEnabledMono: MultipleColorSemanticTokens { get }
    var chipColorBgFocus: MultipleColorSemanticTokens { get }
    var chipColorBgFocusMono: MultipleColorSemanticTokens { get }
    var chipColorBgHover: MultipleColorSemanticTokens { get }
    var chipColorBgHoverMono: MultipleColorSemanticTokens { get }
    var chipColorBgPressed: MultipleColorSemanticTokens { get }
    var chipColorBgPressedMono: MultipleColorSemanticTokens { get }
    var chipColorBorderDisabled: MultipleColorSemanticTokens { get }
    var chipColorBorderDisabledMono: MultipleColorSemanticTokens { get }
    var chipColorBorderEnabled: MultipleColorSemanticTokens { get }
    var chipColorBorderEnabledMono: MultipleColorSemanticTokens { get }
    var chipColorBorderHover: MultipleColorSemanticTokens { get }
    var chipColorBorderHoverMono: MultipleColorSemanticTokens { get }
    var chipColorBorderPressed: MultipleColorSemanticTokens { get }
    var chipColorBorderPressedMono: MultipleColorSemanticTokens { get }
    var chipColorBorderSelected: MultipleColorSemanticTokens { get }
    var chipColorBorderFocus: MultipleColorSemanticTokens { get }
    var chipColorBorderFocusMono: MultipleColorSemanticTokens { get }
    var chipColorContentDisabled: MultipleColorSemanticTokens { get }
    var chipColorContentDisabledMono: MultipleColorSemanticTokens { get }
    var chipColorContentEnabled: MultipleColorSemanticTokens { get }
    var chipColorContentEnabledMono: MultipleColorSemanticTokens { get }
    var chipColorContentFocus: MultipleColorSemanticTokens { get }
    var chipColorContentFocusMono: MultipleColorSemanticTokens { get }
    var chipColorContentHover: MultipleColorSemanticTokens { get }
    var chipColorContentHoverMono: MultipleColorSemanticTokens { get }
    var chipColorContentPressed: MultipleColorSemanticTokens { get }
    var chipColorContentPressedMono: MultipleColorSemanticTokens { get }

    // MARK: - Spaces

    var chipSpaceColumnGapColumnGap: SpaceSemanticToken { get }
    var chipSpaceInsetIconOnly: SpaceSemanticToken { get }
    var chipSpacePaddingBlock: SpaceSemanticToken { get }
    var chipSpacePaddingInlineIconEnd: SpaceSemanticToken { get }
    var chipSpacePaddingInlineIconNone: SpaceSemanticToken { get }
    var chipSpacePaddingInlineIconOnly: SpaceSemanticToken { get }
    var chipSpacePaddingInlineIconStart: SpaceSemanticToken { get }
    var chipSpacePaddingInlineLabelEnd: SpaceSemanticToken { get }
    var chipSpacePaddingInlineLabelStart: SpaceSemanticToken { get }
    var chipSpacePaddingStackPaddingBlock: SpaceSemanticToken { get }
}

// swiftlint:enable missing_docs
