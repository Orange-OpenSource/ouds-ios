//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import OUDSTokensSemantic

// [File not generated by the tokenator]
// WARNING: Not synchronized anymore with the Figjam / Figma by developers team
// Create an issue for update https://github.com/Orange-OpenSource/ouds-ios/issues/new?template=token_update.yml

// swiftlint:disable missing_docs

/// Declares all component tokens for buttons components like `OUDSButton` in **monochrome mode**.
/// Use for tokens providers like `OrangeThemeButtonComponentTokensProvider`.
///
/// - Since: 0.16.0
public protocol ButtonMonoComponentTokens {
    var buttonMonoColorBgDefaultEnabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgDefaultHover: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgDefaultPressed: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgDefaultLoading: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgDefaultDisabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgDefaultFocus: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgMinimalEnabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgMinimalHover: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgMinimalPressed: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgMinimalLoading: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgMinimalDisabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgMinimalFocus: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgStrongEnabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgStrongHover: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgStrongPressed: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgStrongLoading: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgStrongDisabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBgStrongFocus: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentDefaultEnabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentDefaultHover: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentDefaultPressed: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentDefaultLoading: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentDefaultDisabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentDefaultFocus: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentMinimalEnabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentMinimalHover: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentMinimalPressed: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentMinimalLoading: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentMinimalDisabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentMinimalFocus: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentStrongEnabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentStrongHover: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentStrongPressed: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentStrongLoading: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentStrongDisabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorContentStrongFocus: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderDefaultEnabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderDefaultHover: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderDefaultPressed: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderDefaultLoading: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderDefaultDisabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderDefaultFocus: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderStrongEnabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderStrongHover: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderStrongPressed: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderStrongLoading: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderStrongDisabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderStrongFocus: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderMinimalEnabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderMinimalHover: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderMinimalPressed: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderMinimalLoading: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderMinimalDisabled: MultipleColorSemanticTokens { get }
    var buttonMonoColorBorderMinimalFocus: MultipleColorSemanticTokens { get }
}

// swiftlint:enable missing_docs
