//
// Software Name: OUDS iOS
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Authors: See CONTRIBUTORS.txt
// Software description: A SwiftUI components library with code examples for Orange Unified Design System
//

import SwiftUI

/// The data to use to populate the picker of ``OUDSRadioItem`` objects.
/// Each property in this ``OUDSRadioPickerData`` is used to define the suitable ``OUDSRadioItem``.
///
/// - Since: 0.14.0
public struct OUDSRadioPickerData<Tag> where Tag: Hashable {

    /// The identifier, supposed to be unique, to discriminate the element.
    /// This value will be exposed as selection inside the ``OUDSRadioPicker``.
    let tag: Tag

    /// The label, main text, the ``OUDSRadioItem`` must have
    let label: String

    /// An optional additional label the ``OUDSRadioItem`` can have
    let additionalLabel: String?

    /// An optional helper text the ``OUDSRadioItem`` can have
    let helper: String?

    /// An optional image the ``OUDSRadioItem`` can have
    let icon: Image?

    /// Define if the ``OUDSRadioItem`` is outlined or not
    let isOutlined: Bool

    /// Define if the ``OUDSRadioItem`` is reversed or not
    let isReversed: Bool

    /// Define if the ``OUDSRadioItem`` is in error context or not
    let isError: Bool

    /// Define if the ``OUDSRadioItem`` is in read only mode or not
    let isReadOnly: Bool

    /// Define if the ``OUDSRadioItem`` has a divider not
    let hasDivider: Bool

    /// If needed, and because the items in the ``OUDSRadioPicker`` are generated by the picker, the accesibility identifier to add to the generated item.
    /// Can be useful for automated tests for examples or anything else.
    /// By default is nil as the logic of identifiers is in the hand of the users.
    let accessibilityIdentifier: String?

    /// Defines the data to use to define the radio buttons (``OUDSRadioItem``)
    /// - Parameters:
    ///    - tag: a value to discriminate one radio to another
    ///    - label: the mandatory text to add to ``OUDSRadioItem``
    ///    - additionalLabel: An optional additinal text, default set to nil
    ///    - helper: Another optional text, default set to nil
    ///    - icon: An optional image, default set to nil
    ///    - isOutlined: True to outline the ``OUDSRadioItem``, false otherwise (default)
    ///    - isReversed: True to use to reversed layour of the ``OUDSRadioItem``, false otherwise (default)
    ///    - isError: True if in an error context, false otherwise (default)
    ///    - isReadOnly: True if read only, false otherwise (default)
    ///    - hasDivider: True if a divider must be added for the current ``OUDSRadioItem``, false otherwise (default)
    ///    - accessibilityIdentifier: The accessibility identifier to add to the item, nil by default
    ///
    /// **Remark: If `label`, `additionalLabel` and `helper` strings are wording keys from strings catalog stored in `Bundle.main`, they are
    /// automatically localized. Else, prefer to provide the localized string if key is stored in another bundle.**
    public init(tag: Tag,
                label: String,
                additionalLabel: String? = nil,
                helper: String? = nil,
                icon: Image? = nil,
                isOutlined: Bool = false,
                isReversed: Bool = false,
                isError: Bool = false,
                isReadOnly: Bool = false,
                hasDivider: Bool = false,
                accessibilityIdentifier: String? = nil)
    {
        self.tag = tag
        self.label = label
        self.additionalLabel = additionalLabel
        self.helper = helper
        self.icon = icon
        self.isOutlined = isOutlined
        self.isReversed = isReversed
        self.isError = isError
        self.isReadOnly = isReadOnly
        self.hasDivider = hasDivider
        self.accessibilityIdentifier = accessibilityIdentifier
    }
}
